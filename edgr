#!/usr/bin/env python3

import os
import sys
import time
import random
import signal
import argparse
import playsound
import threading

import sqlite3
import yaml

home_dir = os.environ['HOME']
config_file = f'{home_dir}/.config/edgr.yaml'
audio_dir   = f'{home_dir}/lib/audio'
db_file     = f'{home_dir}/.config/edgr.sqlite'

def main(config_file, audio_dir, db_file):
  # Read command-line args
  args = cli_args()

  if args.config is not None:
    config_file = args.config

  # Read config file
  config = read_config(config_file)

  # Is green light active?
  green = get_val(db_file, config['user_id'], 'enable_green')

  edges_min = get_val(db_file, config['user_id'], 'edges_min')
  edges_max = get_val(db_file, config['user_id'], 'edges_max')

  # Set the number of edges for this session
  edges = random.randint(edges_min, edges_max)

  # Allow --edges to override rolled edges; but only if more are requested
  if args.edges > edges:
    edges = args.edges

  # Get number of edges user owes
  owed = get_val(db_file, config['user_id'], 'sessions_owed')

  # Disable the green light if any sessions are still owed
  if owed > 0:
    green = 0

  # --nogreen disables green light
  if args.nogreen > 0:
    green = 0

  # Ante up -- add sessions to be removed when the edges are completed
  set_val(db_file, config['user_id'], 'sessions_owed', owed + edges)

  session_id = new_session(db_file, config['user_id'], edges, green)

  config['session_id']    = session_id

  config['edges_left']    = edges
  config['edges_done']    = 0
  config['edges_failed']  = 0

  config['cooldown_min']  = get_val(db_file, config['user_id'], 'cooldown_min')
  config['cooldown_max']  = get_val(db_file, config['user_id'], 'cooldown_max')

  config['goal_min']      = get_val(db_file, config['user_id'], 'goal_min')
  config['goal_max']      = get_val(db_file, config['user_id'], 'goal_max')

  config['enable_green']  = green

  # Local signal handler function - avoid need for global vars
  def sig_handler(*args):
    left = config['edges_left']
    done = config['edges_done']
    left_plural = 'edge' if left == 1 else 'edges'
    done_plural = 'edge' if done == 1 else 'edges'
    print()
    print(f'Aborted Session!')
    print(f'{left} {left_plural} left')
    print(f'{done} {done_plural} done')
    sys.exit(1)

  signal.signal(signal.SIGINT, sig_handler)

  while config['edges_left'] > 0:
    stroke(config, audio_dir, db_file)

  # Completed session!
  owed = get_val(db_file, config['user_id'], 'sessions_owed')
  set_val(db_file, config['user_id'], 'sessions_owed', owed - 1)

  edges_done = config['edges_done']

  print("You may stop stroking your cock.")

  done_plural = 'edge' if edges_done == 1 else 'edges'
  print(f'You completed {edges_done} {done_plural} this session.')
  play_rand_sound(f'{audio_dir}/stop', 0)

def stroke(config, audio_dir, db_file):
  if config['edges_done'] == 0:
    print("Get ready to edge yourself.")
    play_rand_sound(f'{audio_dir}/start', 0)
  else:
    print("Get ready to edge, stroke yourself!")
    play_rand_sound(f'{audio_dir}/stroke', 0)

  stroke_min  = get_val(db_file, config['user_id'], 'stroke_min')
  stroke_max  = get_val(db_file, config['user_id'], 'stroke_max')
  stroke_skew = get_val(db_file, config['user_id'], 'stroke_skew')

  time.sleep(fuzzy_weight(stroke_min, stroke_max, stroke_skew))

  # Potentially add stroke time
  for foo in range(0, 5):
    if random.randint(1, 8) == 1:
      stroke_add_min = get_val(db_file, config['user_id'], 'stroke_add_min')
      stroke_add_max = get_val(db_file, config['user_id'], 'stroke_add_max')
      play_rand_sound(f'{audio_dir}/laughs', 0)
      time.sleep(random.randint(stroke_add_min, stroke_add_max))

  print("Edge for me.")
  play_rand_sound(f'{audio_dir}/edges', 0)

  start = time.time()

  input("Press Enter once you get to the edge.")

  elapsed = time.time() - start

  print("Hands off your cock.")
  play_rand_sound(f'{audio_dir}/laughs', 0)

  dbh = sqlite3.connect(db_file)
  sth = dbh.cursor()

  # Log the edge
  query = ''' insert into edges (session_id, to_edge, max_min, max)
              values (?, ?, ?, ?) '''

  sth.execute(query, (
                      config['session_id'],
                      elapsed,
                      config['goal_min'],
                      config['goal_max'],
                    )
              )

  dbh.commit()
  dbh.close()

  time.sleep(4)

  config['edges_done'] += 1

  print("Good boy.")
  play_rand_sound(f'{audio_dir}/good-boy', 0)

  if elapsed > config['goal_max']:
    print("Too slow, try again.")
    config['edges_failed'] += 1
    if config['edges_failed'] > 2:
      owed = get_val(db_file, config['user_id'], 'sessions_owed')
      set_val(db_file, config['user_id'], 'sessions_owed', owed + 1)
  else:
    config['edges_left'] -= 1
    owed = get_val(db_file, config['user_id'], 'sessions_owed')
    set_val(db_file, config['user_id'], 'sessions_owed', owed - 1)

    # Reduce edge window... dun dun duuuuunnnnnn!
    if elapsed > config['goal_min'] and elapsed < config['goal_max']:
      config['goal_max'] = elapsed

  # Cool down after edging
  time.sleep(random.randint(config['cooldown_min'], config['cooldown_max']))

  if config['edges_left'] == 0 and config['enable_green'] > 0:
    # Flip 3 coins
    head1 = random.randint(0, 1)
    head2 = random.randint(0, 1)
    head3 = random.randint(0, 1)

    green_time_min = get_val(db_file, config['user_id'], 'green_time_min')
    green_time_max = get_val(db_file, config['user_id'], 'green_time_max')

    # If HHH, green light
    if head1 and head2 and head3:
      green_light(green_time_min, green_time_max)

      try_again = random.randint(0, 20) + 3

      # Hope you got off, here's some more sessions
      set_val(db_file, config['user_id'], 'session_owed', try_again)

def cli_args():
  parser = argparse.ArgumentParser()

  parser.add_argument(
    '--green',
    action='count',
    help='Enable green light'
  )

  parser.add_argument(
    '--edges',
    default=0,
    type=int,
    help='Specify the number of edges'
  )

  parser.add_argument(
    '--config',
    default=None,
    help='Path to config file'
  )

  return parser.parse_args()

def green_light(time_min, time_max):
  print("Get ready to edge, stroke yourself!")
  play_rand_sound(f'{audio_dir}/stroke', 0)
  time.sleep(random.randint(3, 30))

  print("Green light! Cum for me!")
  play_rand_sound(f'{audio_dir}/finish', 0)
  time.sleep(random.randint(time_min, time_max))
  print
  print("Hands off your cock.")
  print

def read_config(config_file):
  with open(config_file) as file:
    config = yaml.full_load(file)

  return config

def get_val(db_file, user_id, key):
  dbh = sqlite3.connect(db_file)
  sth = dbh.cursor()
  query = 'select val from user_data where user_id = ? and key = ?'
  sth.execute(query,(user_id, key))
  val = int(sth.fetchone()[0])
  dbh.close()

  return val

def set_val(db_file, user_id, key, val):
  dbh = sqlite3.connect(db_file)
  sth = dbh.cursor()
  query = 'update user_data set val = ? where user_id = ? and key = ?'
  sth.execute(query,(val, user_id, key))
  dbh.commit()
  dbh.close()

def add_slaps(slaps):
  query = """ update settings set value = value + ? where name = ? """
  sth.execute(query,(slaps, 'slaps'))
  dbh.commit()

def new_session(db_file, user_id, edges, green):
  dbh = sqlite3.connect(db_file)
  sth = dbh.cursor()
  query = 'insert into sessions (user_id, edges, green_light) values (?, ?, ?)'
  sth.execute(query,(user_id, edges, green))
  # Get the session id
  session_id = sth.lastrowid
  dbh.commit()

  return session_id

def fuzzy_weight(minimum, maximum, favor):
  target = int(abs(maximum - minimum) * favor / 100)

  skew = 1
  if random.randint(0,2) == 0:
    skew = -1

  result = target
  for i in range(0, target):
    if random.randint(0, 3) == 0:
      result += skew
    else:
      result -= skew

  return result

def play_rand_sound(directory, blocking = 0):
  if os.path.isdir(directory):
    filename = ''

    while not os.path.isfile(f'{directory}/{filename}'):
      filename = random.choice(os.listdir(directory))

    mp3 = f'{directory}/{filename}'
    if blocking == 1:
      playsound.playsound(mp3)
    else:
      sound_thread = threading.Thread(target=playsound.playsound, args=(mp3,))
      sound_thread.start()
  return

if __name__ == '__main__':
  # Run handler() when SIGINT received
  main(config_file, audio_dir, db_file)
