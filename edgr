#!/usr/bin/env python3

import os
import sys
import time
import random
import signal
import argparse
import playsound
import threading

import sqlite3
import yaml

home_dir = os.environ['HOME']
config_file = f'{home_dir}/.config/edgr.yaml'
audio_dir   = f'{home_dir}/lib/audio'
db_file     = f'{home_dir}/.config/edgr.sqlite'

def main(config_file, audio_dir, db_file):
  # Read command-line args
  args = cli_args()

  if args.config is not None:
    config_file = args.config

  # Read config file
  config = read_config(config_file)

  # Set the green light status
  green = 0
  if "green" in config:
    if "chances" in config['green']:
      green = config['green']['chances']
  if args.green > 0:
    green = args.green

  # Set the number of edges for this session
  edges = random.randint(config['edges']['min'],
                         config['edges']['max'])
  if args.edges > 0:
    edges = args.edges

  session_id = new_session(db_file, config['user_id'], edges, green)

  config['session_id']        = session_id
  config['edges']['remain']   = edges
  config['edges']['failed']   = 0
  config['edges']['complete'] = 0
  config['green']['chances']  = green

  # Local signal handler function - avoid need for global vars
  def sig_handler(*args):
    remain = config['edges']['remain']
    complete = config['edges']['complete']
    remain_plural = 'edge' if remain == 1 else 'edges'
    complete_plural = 'edge' if complete == 1 else 'edges'
    print()
    print(f'Aborted with {remain} {remain_plural} remaining.')
    print(f'{complete} {complete_plural} completed.')
    sys.exit(1)

  signal.signal(signal.SIGINT, sig_handler)

  while config['edges']['remain'] > 0:
    stroke(config, audio_dir, db_file)

  edges_completed = config['edges']['complete']
  print("You may stop stroking your cock.")
  completed_plural = 'edge' if edges_completed == 1 else 'edges'
  print(f'You completed {edges_completed} {completed_plural} this session.')
  play_rand_sound(f'{audio_dir}/stop', 0)

def stroke(config, audio_dir, db_file):
  if config['edges']['complete'] == 0:
    print("Get ready to edge yourself.")
    play_rand_sound(f'{audio_dir}/start', 0)
  else:
    print("Get ready to edge, stroke yourself!")
    play_rand_sound(f'{audio_dir}/stroke', 0)

  time.sleep(fuzzy_weight(config['stroke']['min'],
                          config['stroke']['max'],
                          config['stroke']['skew']))

  # Potentially add stroke time
  for foo in range(0, 5):
    if random.randint(1, 8) == 1:
      play_rand_sound(f'{audio_dir}/laughs', 0)
      time.sleep(random.randint(config['stroke']['extra']['min'],
                                config['stroke']['extra']['max']))

  print("Edge for me.")
  play_rand_sound(f'{audio_dir}/edges', 0)

  start = time.time()

  input("Press Enter once you get to the edge.")

  elapsed = time.time() - start

  print("Hands off your cock.")
  play_rand_sound(f'{audio_dir}/laughs', 0)

  dbh = sqlite3.connect(db_file)
  sth = dbh.cursor()
  # Log the edge
  query = ''' insert into edges (session_id, to_edge, max, max_min)
              values (?, ?, ?, ?) '''
  sth.execute(query,(config['session_id'],
                     elapsed,
                     config['goal']['max'],
                     config['goal']['min']))
  dbh.commit()
  dbh.close()

  time.sleep(4)

  config['edges']['complete'] += 1

  print("Good boy.")
  play_rand_sound(f'{audio_dir}/good-boy', 0)

  if elapsed > config['goal']['max']:
    penalty_min = config['edges']['penalty']['min']
    penalty_max = config['edges']['penalty']['max']
    print("Too slow, try again.")
    config['edges']['remain'] += random.randint(penalty_min, penalty_max)
    config['edges']['failed'] += 1

    if elapsed > (2 * config['goal']['min']):
      config['edges']['remain'] += random.randint(penalty_min, penalty_max)

  else:
    config['edges']['remain'] -= 1

    # Reduce edge window... dun dun duuuuunnnnnn!
    if elapsed > config['goal']['min'] and elapsed < config['goal']['max']:
      config['goal']['max'] = elapsed

  # Cool down after edging
  time.sleep(random.randint(config['stroke']['cooldown']['min'],
                            config['stroke']['cooldown']['max']))

  if config['edges']['remain'] == 0 and config['green']['chances'] > 0:
    config['green']['chances'] -= 1

    # Flip 3 coins
    head1 = random.randint(0, 1)
    head2 = random.randint(0, 1)
    head3 = random.randint(0, 1)

    # If HHH, green light
    if head1 and head2 and head3:
      green_light(config['green']['min'], config['green']['max'])
    else:
      config['edges']['remain'] += head1 + head2 + head3

      # Penalty for TTT
      if config['edges']['remain'] == 0:
        config['edges']['remain'] = random.randint(3, 5)

def cli_args():
  parser = argparse.ArgumentParser()

  parser.add_argument(
    '--green',
    action='count',
    help='Enable green light'
  )

  parser.add_argument(
    '--edges',
    default=0,
    type=int,
    help='Specify the number of edges'
  )

  parser.add_argument(
    '--config',
    default=None,
    help='Path to config file'
  )

  return parser.parse_args()

def green_light(time_min, time_max):
  print("Green light! Cum for me!")
  time.sleep(random.randint(time_min, time_max))
  print
  print("Hands off your cock.")
  print

def read_config(config_file):
  with open(config_file) as file:
    config = yaml.full_load(file)

  return config

def add_slaps(slaps):
  query = """ update settings set value = value + ? where name = ? """
  sth.execute(query,(slaps, 'slaps'))
  dbh.commit()

def new_session(db_file, user_id, edges, green):
  dbh = sqlite3.connect(db_file)
  sth = dbh.cursor()
  query = 'insert into sessions (user_id, edges, green_light) values (?, ?, ?)'
  sth.execute(query,(user_id, edges, green))
  # Get the session id
  session_id = sth.lastrowid
  dbh.commit()

  return session_id

def fuzzy_weight(minimum, maximum, favor):
  target = int(abs(maximum - minimum) * favor / 100)

  skew = 1
  if random.randint(0,2) == 0:
    skew = -1

  result = target
  for i in range(0, target):
    if random.randint(0, 3) == 0:
      result += skew
    else:
      result -= skew

  return result

def play_rand_sound(directory, blocking = 0):
  if os.path.isdir(directory):
    filename = ''

    while not os.path.isfile(f'{directory}/{filename}'):
      filename = random.choice(os.listdir(directory))

    mp3 = f'{directory}/{filename}'
    if blocking == 1:
      playsound.playsound(mp3)
    else:
      sound_thread = threading.Thread(target=playsound.playsound, args=(mp3,))
      sound_thread.start()
  return

if __name__ == '__main__':
  # Run handler() when SIGINT received
  main(config_file, audio_dir, db_file)
