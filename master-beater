#!/usr/bin/perl

use strict;
use warnings;

use Proc::Killall;
use Sessions;

my $conf_file   = "$ENV{HOME}/.config/sessions";
# Read config file and command line args and populate %$state
my $state       = init_session_state($conf_file);

my $field = $$state{pace_max} - $$state{pace_min};

if ($field < 0) {
  printf STDERR "max_pace lower than min_pace; configuration error.\n";
  exit 1;
}

if ($$state{pace_cur} == 0) {
  # Set the starting pace to just above the low endzone
  $$state{pace_cur} = $$state{pace_min} +
                      int($field * ($$state{endzone_low} / 100)) + 5;
}

if ($$state{dice_count} > 0) {
  $$state{time_extra} = 0;
  my @rolls = ();
  for (1 .. $$state{dice_count} + $$state{extra_high} + $$state{extra_low}) {
    push @rolls,int(rand($$state{dice_sides}) + 1);
  }
  @rolls = sort { $a <=> $b } @rolls;

  $$state{time_min} = 0;
  foreach my $die (@rolls[0 .. $$state{dice_count}-1]) {
    $$state{time_min} += $die;
  }

  $$state{time_max} = 0;
  foreach my $die (@rolls[$#rolls - ($$state{dice_count}-1) .. $#rolls]) {
    $$state{time_max} += $die;
  }

  my @lows  = @rolls[0 .. $$state{extra_low}-1];
  my @highs = @rolls[$#rolls - $$state{extra_high} + 1 .. $#rolls];
  my @used  = @rolls[$$state{extra_low} .. $#rolls - $$state{extra_high}];
  printf "Dice Rolls: %s [ %s ] %s\n","@lows","@used","@highs";

  $$state{time_end} = 0;
  foreach my $die (@used) {
    $$state{time_end} += $die;
  }
} else {
  my @times = ();
  for (1 .. 1 + $$state{extra_high} + $$state{extra_low}) {
    my $time = int(rand($$state{time_max} - $$state{time_min} + 1));
    $time += $$state{time_min};
    push @times,$time;
  }
  @times = sort { $a <=> $b } @times;

  my @lows  = @times[0 .. $$state{extra_low} - 1];
  my @highs = @times[$#times - $$state{extra_high} + 1 .. $#times];
  my $used  = $times[$$state{extra_low}];
  printf "Times: %s [ %s ] %s\n","@lows","$used","@highs";

  $$state{time_min} = $times[0];
  $$state{time_max} = $times[$#times];
  $$state{time_end} = $used;
}

# Convert times into seconds
$$state{time_min} *= 60;
$$state{time_max} *= 60;
$$state{time_end} *= 60;

if ($$state{lose} =~ /[0-9]+/) {
  my $time_mod = int($$state{lose} * $$state{time_delta_lose} / 2);
  $$state{time_end} += $time_mod * 2;
  if ($$state{time_end} > $$state{time_max}) {
    $$state{time_end} = $$state{time_max};
  }
  $$state{time_max} += $time_mod;
}

# Bump maximum time based on performance
if ("$$state{wrong}$$state{win}$$state{lose}" =~ /[0-9]+/) {
  my $bonus_boost = $$state{wrong} * ($$state{lose} / $$state{win});
  $$state{time_max} += $$state{time_delta_max} * $bonus_boost;
}

if ($$state{win} =~ /[0-9]+/) {
  $$state{time_end} -= $$state{win} * $$state{time_delta_win};
  if ($$state{time_min} > $$state{time_end}) {
    $$state{time_end} = $$state{time_min};
  }
}

# Fuzzify time, to a factor of $$state{fuzzify} fuzziness
$$state{time_min} = fuzzy($$state{time_min},$$state{fuzzify});
$$state{time_max} = fuzzy($$state{time_max},$$state{fuzzify});
$$state{time_end} = fuzzy($$state{time_end},$$state{fuzzify});

if ($$state{time_min} > $$state{time_end}) {
  my $temp = $$state{time_min};
  $$state{time_min} = $$state{time_end};
  $$state{time_end} = $temp;
}

if ($$state{time_end} > $$state{time_max}) {
  my $temp = $$state{time_end};
  $$state{time_end} = $$state{time_max};
  $$state{time_max} = $temp;
}

# Initialize the session
my $finalized   = 0;
if (open my $session_fh,'>',"$$state{session_script}") {
  truncate $session_fh,0;
  close $session_fh;
} else {
  error_msg("Unable to open session program file: $!",1);
}

while ($finalized == 0) {
  extend_session($state);

  if ($$state{session_length} > $$state{time_min}) {
    if ($$state{session_length} > $$state{time_max}) {
      $finalized = 1;
    }
    if ($$state{session_length} > $$state{time_end}) {
      $finalized = 1;
    }
  }
}

$$state{time_orig} = $$state{session_length};

if ($$state{prize_on} and !int(rand(6))) {
  $$state{prize_armed} = 1;
}

write_config($$state{state_file},$state);

# Start the slideshow
my $slideshow_pid = fork();
if (!defined $slideshow_pid) {
  error_msg("Cannot fork() - aborting: $!",1);
}

if ($slideshow_pid == 0) {
  sexy_slideshow($state);
  exit 0;
}

my $ctronome_pid = fork();
if (!defined $ctronome_pid) {
  error_msg("Cannot fork() - aborting: $!",2);
}

if ($ctronome_pid == 0) {
  play_metronome_script($state);
  exit 0;
}

waitpid -1,0;
do_cleanup();
exit 0;

sub do_cleanup {
  killall 'HUP', 'feh';
  killall 'HUP', 'ctronome';

  $state = read_config($$state{state_file});

  my $real_elapsed  = time() - $$state{time_start};
  my $added         = $$state{session_length} - $$state{time_orig};
  my $remaining     = $$state{session_length} - $real_elapsed;

  printf "Session Length: %s [ %s ] %s\n",
    sec_to_human($$state{time_min}),
    sec_to_human($$state{time_orig}),
    sec_to_human($$state{time_max});
  printf "Elapsed Time:   %s\n",sec_to_human($real_elapsed);
  printf "Added Time:     %s\n",sec_to_human($added);

  if (int($remaining) > 0) {
    printf "Remaining Time: %s\n", sec_to_human($remaining);
  }

  my $strokes = 0;
  my $bpm_sum = 0;

  if (open my $script,'<',$$state{session_script}) {
    while (my $line = <$script>) {
      if ($line =~ /^[0-9]/) {
        my ($beats,$bpm) = ($line =~ /^([0-9]+) ([0-9]+)/);
        $strokes += $beats;
        $bpm_sum += ($beats * $bpm);
      }
    }
    close $script;
  } else {
    printf STDERR "Unable to open %s: %s\n",$$state{session_script},$!;
  }

  printf "Strokes:        %s\n",$strokes;
  printf "Average BPM:    %s\n",int($bpm_sum / $strokes);

  if (open my $log,'>>',$$state{session_log}) {
    my $now = time;
    printf $log "%s:%s:%s:%s:%s:%s:%s\n",
            $now,
            $$state{session_length},
            $added,
            $real_elapsed,
            int($remaining),
            $$state{prize_armed},
            $$state{icy_used};
    close $log;
  } else {
    printf STDERR "Unable to open %s: %s\n",$$state{session_log},$!;
  }

  if (open my $log,'<',$$state{session_log}) {
    my $now = time;
    my $stroked     = 0;
    my $unfinished  = 0;
    while (my $line = <$log>) {
      my ($time,$length,$added,$elapsed,$remains,$icy_on,$icy_used)
          = split(/:/,$line);
      if ($time > ($now - 24 * 60 * 60)) {
        $stroked     += $elapsed;
        $unfinished  += $remains;
      }
    }
    close $log;
    printf "\nPast 24 hours:\n";
    printf "  Stroked:      %s\n",sec_to_human($stroked);
    printf "  Unfinished:   %s\n",sec_to_human($unfinished);
  } else {
    printf STDERR "Unable to open %s: %s\n",$$state{session_log},$!;
  }

  if (-f $$state{state_file}) {
    unlink $$state{state_file};
  }

  if (-f $$state{session_script}) {
    unlink $$state{session_script};
  }

  if (-f $$state{image_playlist}) {
    unlink $$state{image_playlist};
  }
}
