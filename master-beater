#!/usr/bin/perl

use strict;
use warnings;

use Proc::Killall;
use Sessions;

my $conf_file   = "$ENV{HOME}/.config/sessions";
# Read config file and command line args and populate %$state
my $state       = init_session_state($conf_file);
# Initialize the master_beater specific stuff
   $state       = master_beater_init($state);

my $field = $$state{pace_max} - $$state{pace_min};

if ($field < 0) {
  printf STDERR "max_pace lower than min_pace; configuration error.\n";
  exit 1;
}

if ($$state{pace_cur} == 0) {
  # Set the starting pace to just above the low endzone
  $$state{pace_cur} = $$state{pace_min} +
                      int($field * ($$state{endzone_low} / 100)) + 5;
}

if (open my $session_fh,'>',"$$state{session_script}") {
  truncate $session_fh,0;
  close $session_fh;
} else {
  error_msg("Err 7: Unable to open session program file: $!",1);
}

# Initialize the session
my $finalized = 0;
while ($finalized == 0) {
  extend_session($state);

  if ($$state{session_length} > $$state{time_orig}) {
    $finalized = 1;
  }
}

$$state{time_orig} = $$state{session_length};

write_config($$state{state_file},$state);

# Start the slideshow
my $slideshow_pid = fork();
if (!defined $slideshow_pid) {
  error_msg("Cannot fork() - aborting: $!",1);
}

if ($slideshow_pid == 0) {
  sexy_slideshow($state);
  exit 0;
}

my $ctronome_pid = fork();
if (!defined $ctronome_pid) {
  error_msg("Cannot fork() - aborting: $!",2);
}

if ($ctronome_pid == 0) {
  play_metronome_script($state);
  exit 0;
}

waitpid -1,0;
do_cleanup();
exit 0;

sub do_cleanup {
  killall 'HUP', 'feh';
  killall 'HUP', 'ctronome';

  $state = read_config($$state{state_file});

  my $real_elapsed  = time() - $$state{time_start};
  my $added         = $$state{session_length} - $$state{time_orig};
  my $remaining     = int($$state{session_length} - $real_elapsed);

  printf "Session Length: %s [ %s ] %s\n",
    sec_to_human($$state{time_min}),
    sec_to_human($$state{time_orig}),
    sec_to_human($$state{time_max});
  printf "Elapsed Time:   %s\n",sec_to_human($real_elapsed);
  printf "Added Time:     %s\n",sec_to_human($added);

  if ($remaining > 0) {
    printf "Remaining Time: %s\n", sec_to_human($remaining);
  }

  my $strokes = 0;
  my $bpm_sum = 0;

  if (open my $script,'<',$$state{session_script}) {
    while (my $line = <$script>) {
      if ($line =~ /^[0-9]/) {
        my ($beats,$bpm) = ($line =~ /^([0-9]+) ([0-9]+)/);
        $strokes += $beats;
        $bpm_sum += ($beats * $bpm);
      }
    }
    close $script;
  } else {
    printf STDERR "Err 8: Unable to open %s: %s\n",$$state{session_script},$!;
  }

  printf "Strokes:        %s\n",$strokes;
  printf "Average BPM:    %s\n",int($bpm_sum / $strokes);

  if (open my $log,'>>',$$state{session_log}) {
    my $now = time;
    printf $log "%s:%s:%s:%s:%s:%s:%s\n",
            $now,
            $$state{session_length},
            $added,
            $real_elapsed,
            $remaining,
            $$state{prize_armed},
            $$state{icy_used};
    close $log;
  } else {
    printf STDERR "Err 9: Unable to open %s: %s\n",$$state{session_log},$!;
  }

  if (open my $log,'<',$$state{session_log}) {
    my $now = time;
    my $stroked     = 0;
    my $unfinished  = 0;
    while (my $line = <$log>) {
      my ($time,$length,$added,$elapsed,$remains,$icy_on,$icy_used)
          = split(/:/,$line);
      if ($time > ($now - 24 * 60 * 60)) {
        $stroked     += $elapsed;
        $unfinished  += $remains;
      }
    }
    close $log;
    printf "\nPast 24 hours:\n";
    printf "  Stroked:      %s\n",sec_to_human($stroked);
    printf "  Unfinished:   %s\n",sec_to_human($unfinished);
  } else {
    printf STDERR "Err 10: Unable to open %s: %s\n",$$state{session_log},$!;
  }

  # Twitters
  my $date = get_today($$state{day_start});

  my $sessions  = get_sessions_by_date($state,$date);
  my $attempted = scalar(keys %$sessions);
  my ($owed,$failed,$greed) = get_remaining_sessions($state,$date);
  my $tweet = sprintf "Session %s", $attempted;

  if ($remaining > 0) {
    $tweet .= " failed; 1 point earned.";
    $tweet .= sprintf " %s remaining.", sec_to_human_precise($remaining);
  } else {
    $tweet .= " passed,";
  }
  $tweet .= sprintf " %s completed.", sec_to_human_precise($real_elapsed);

  my $icy_hot = 'None';
  if ($$state{icy_used} > 0) {
    $icy_hot = 'A little';
    if ($$state{icy_used} > 1) {
      $icy_hot = 'A lot';
    }
  }

  if ($$state{prize_disabled} > 0) {
    $icy_hot = 'Disabled';
  }

  $tweet = sprintf "%s Icy Hot: %s.", $tweet, $icy_hot;

  if ($owed) {
    if ($owed == 1) {
      $tweet = sprintf "%s %s unresolved point remains.", $tweet, $owed;
    } else {
      $tweet = sprintf "%s %s unresolved points remain.", $tweet, $owed;
    }
  } else {
    $tweet = sprintf "%s All points resolved.", $tweet;
  }

  printf "%s\n", $tweet;

  if ($remaining > 0 || $owed == 0) {
    twitters($state,$tweet);
  }

  if (-f $$state{state_file}) {
    unlink $$state{state_file};
  }

  if (-f $$state{session_script}) {
    unlink $$state{session_script};
  }

  if (-f $$state{image_playlist}) {
    unlink $$state{image_playlist};
  }
}
