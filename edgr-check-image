#!/usr/bin/env python3

import os
import glob
import time
import random
import re
import sqlite3
import argparse
import subprocess
import hashlib

home_dir = os.environ['HOME']
caps_dir = f'{home_dir}/files/images/captions'
porn_dir = f'{home_dir}/files/images/porn_pics/pool'
risk_dir = f'{home_dir}/files/images/risky'

keyword_file = f'{home_dir}/.config/edgr.keywords'

def main():
  user_id = 1

  dbh = sqlite3.connect(f'{home_dir}/.config/edgr.sqlite')
  sth = dbh.cursor()
  args = do_cli_args()

  count = 0
  slap  = 0
  risk  = 0

  # full path for image to check
  image = str(args.file[0])

  # red light picture -- if this shows up, no green light
  latest_risk = str(args.red)

  # to_purge is above this number, stop adding penalties
  purge_limit = int(args.purgelimit)

  #risky_files = glob.glob(f'{risk_dir}/*.jpg')
  #latest_risk = max(risky_files, key=os.path.getctime)

  # randomly choose a redlight picture, every time...
  #latest_risk = random.choice(risky_files)

  query = """ select value from settings where name = ? """
  sth.execute(query,('to_purge',))
  to_purge = int(sth.fetchone()[0])

  sth.execute(query,('light_color',))
  color = sth.fetchone()[0]

  sth.execute(query,('edges',))
  edges = sth.fetchone()[0]

  sth.execute(query,('cooldown',))
  cooldown = sth.fetchone()[0]

  penalty = 0

  md5 = hashlib.md5(open(image, 'rb').read()).hexdigest()
  query = """ select seen from edge_images where md5 = ? """
  sth.execute(query,(md5,))
  seen = sth.fetchone()

  if cooldown > 0 and (image.find('risky') == -1 and image.find('captions') == -1):
    query = """ update settings set value = value - 1 where name = 'cooldown' """
    sth.execute(query)
    dbh.commit()

  if seen is not None and edges > 0 and (cooldown > 0 or edges <= 3):
    query = """ update settings set value = value + 2 where name = 'edges' """
    edges += 2
    sth.execute(query)
    dbh.commit()

  if edges <= 0:
    # if the image is in the risky directory, increase the risk
    if (image.find('risky')) > 0:
      spins       = 1
      free_spins  = 4

      if color != 'red':
        spins += 2
        free_spins += 1

      if to_purge <= 0:
        spins += 3
        free_spins += 4

      add_risk = 1

      if (image == latest_risk):
        spins += 4
        free_spins += 2

        query = """ update settings set value = ? where name = ? """
        sth.execute(query,('red', 'light_color'))
        dbh.commit()

      with open(keyword_file, 'r') as fh:
        for line in fh:
          keyword, spins_add, freespins_add = line.split()
          if image.find(keyword) > 0:
            spins += int(spins_add)
            free_spins += int(freespins_add)

      # add pics to purge
      penalty = penalty_adder(spins, free_spins)
      if to_purge < purge_limit:
        to_purge += penalty
      else:
        penalty = 0

      query = """ update settings set value = ? where name = ? """
      sth.execute(query,(to_purge, 'to_purge'))
      dbh.commit()

      # increase the risk level if the purge count is above 0
      if to_purge > 0:
        query = """ update settings set value = value + ? where name = ? """
        sth.execute(query,(add_risk, 'risk'))
        dbh.commit()

      # get the current risk level
      query = """ select value from settings where name = ? """
      sth.execute(query, ('risk',))
      risk = sth.fetchone()[0]

      # get the current slap count
      sth.execute(query,('slaps',))
      active_slaps = sth.fetchone()[0]

      # if, for some reason, active_slaps is negative, set to 0
      if active_slaps < 0:
        query = """ update settings set value = ? where name = ? """
        sth.execute(query,(0,'slaps'))
        dbh.commit()

      # if there are slaps actively being dished out, add some more
      if active_slaps > 0:
        for i in range(1,int(args.wrong)):
          if risk > random.randint(0, 150):
            slap = slap + 1

      # Up to 3 slaps per 'risky' picture
      for i in range(1, 3):
        if risk > random.randint(0, 100):
          slap = slap + 1

    else:
      query = 'select count from seen_images where user_id=? and filename=?'
      sth.execute(query,(user_id, image))
      dbh.commit()
      count = sth.fetchone()

      if count == None:
        count = 1
        query = """insert into seen_images ('user_id', 'filename', 'count')
                    values (?,?,?)"""
        sth.execute(query, (user_id, image, 1))
        dbh.commit()
      else:
        count = count[0] + 1

        query = 'update seen_images set count=? where user_id=? and filename=?'
        sth.execute(query,(count, user_id, image))
        dbh.commit()

        query = """ select value from settings where name = ? """
        sth.execute(query, ('risk',))
        risk = sth.fetchone()[0]

        high_die = int(3 + int(args.right))
        for i in range(1, int(args.wrong) + count):
          if random.randint(1, high_die) == 1:
            if risk > random.randint(0, 100):
              slap = slap + 0

    query = """ select value from settings where name = ? """
    sth.execute(query,('light_color',))
    color = sth.fetchone()[0]

    if color == 'yellow' and to_purge <= 0:
      color = 'green'

    if color == 'red' and to_purge > 0:
      color = 'yellow'

    if penalty == 0:
      print(f'  {color} {to_purge}\n')
    else:
      print(f'  {color} +{penalty}\n')

    if slap > 0:
      slaps = random.randint(1, slap)
      query = """ update settings set value = value + ? where name = ? """
      sth.execute(query,(slaps,'slaps'))
      dbh.commit()
  else:
    if cooldown > 0:
      print(f'cooldown\n')
    else:
      print(f'  edges: {edges}\n')

  dbh.close()

def ztf():
  # zero to five
  # on average return a low val from 0-5
  # return 0-2 more often than 3-5
  count = 0

  if random.randint(0, 3) == 0:
    count += 1

    if random.randint(0, 3) == 0:
      count += 1

      # nested so far, but now 3 at the same level
      if random.randint(0, 3) == 0:
        count += 1

      if random.randint(0, 3) == 0:
        count += 1

      if random.randint(0, 3) == 0:
        count += 1

  return count

def penalty_adder(spins=1, free_spins=0):
  count = 0
  while spins > 0:
    spins -= 1

    if random.randint(0, 4) == 0:
      count += 1
      if free_spins > 0:
        free_spins -= 1
        spins += 1

  return count

def do_cli_args():
  parser = argparse.ArgumentParser()

  parser.add_argument(
    '-r', '--right',
    default=2,
    type=int,
    help='Number pictures in a row right from Thong Game',
  )

  parser.add_argument(
    '-w', '--wrong',
    default=4,
    type=int,
    help='Number pictures in a row wrong from Thong Game',
  )

  parser.add_argument(
    '-R', '--red',
    help='Full path of red light image',
  )

  parser.add_argument(
    '-f', '--file',
    nargs='+',
    help='Full path of file',
  )

  parser.add_argument(
    '-l', '--purgelimit',
    default=4,
    type=int,
    help='Limit for images to purge',
  )

  return parser.parse_args()

if __name__ == '__main__':
  main()
