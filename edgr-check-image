#!/usr/bin/env python3

import os
import glob
import time
import random
import re
import sqlite3
import argparse
import subprocess
import hashlib

home_dir = os.environ['HOME']
caps_dir = f'{home_dir}/files/images/captions'
porn_dir = f'{home_dir}/files/images/porn_pics/pool'
risk_dir = f'{home_dir}/files/images/risky'

keyword_file = f'{home_dir}/.config/edgr.keywords'

def main():
  user_id = 1

  dbh = sqlite3.connect(f'{home_dir}/.config/edgr.sqlite')
  sth = dbh.cursor()
  args = do_cli_args()

  count = 0
  slap  = 0
  risk  = 0

  # full path for image to check
  image = str(args.file[0])

  # red light picture -- if this shows up, no green light
  latest_risk = str(args.red)

  #risky_files = glob.glob(f'{risk_dir}/*.jpg')
  #latest_risk = max(risky_files, key=os.path.getctime)

  # randomly choose a redlight picture, every time...
  #latest_risk = random.choice(risky_files)

  query = """ select value from settings where name = ? """

  sth.execute(query, ('to_purge', ))
  to_purge = int(sth.fetchone()[0])

  sth.execute(query, ('owed', ))
  owed = int(sth.fetchone()[0])

  sth.execute(query, ('cooldown', ))
  cooldown = int(sth.fetchone()[0])

  sth.execute(query, ('stage', ))
  stage = int(sth.fetchone()[0])

  sth.execute(query, ('red_light', ))
  red_light = int(sth.fetchone()[0])

  penalty = 0

  md5 = hashlib.md5(open(image, 'rb').read()).hexdigest()
  query = """ select seen from edge_images where md5 = ? """
  sth.execute(query, (md5, ))
  seen = sth.fetchone()

  # set red light if latest_risk is seen
  if (image == latest_risk):
    query = """ update settings set value = ? where name = ? """
    sth.execute(query,(1, 'red_light'))
    dbh.commit()

    red_light = 1

  # stage 0 -- deleting images, decreasing the to purge count
  if stage == 0:

    # if the image is in the risky directory, increase the risk
    if (image.find('risky')) > 0:
      spins       = 1
      free_spins  = 4

      if not red_light:
        spins += 2
        free_spins += 1

      if (image == latest_risk):
        spins += 4
        free_spins += 2

      # process keywords that increase chances for added edges
      with open(keyword_file, 'r') as fh:
        for line in fh:
          keyword, spins_add, freespins_add = line.split()
          if image.find(keyword) > 0:
            spins += int(spins_add)
            free_spins += int(freespins_add)

      # add pics to purge
      penalty = penalty_adder(spins, free_spins)

      # nerf excess edges
      if owed > 10:
        if penalty > 0:
          if penalty > 3:
            penalty = 2
          else:
            penalty = 1

        if random.randint(0, 3) != 0:
          penalty = 0

      else:
        penalty = 0

      query = """ update settings set value = value + ? where name = ? """
      sth.execute(query,(penalty, 'owed'))
      dbh.commit()

    if penalty == 0:
      print(f'   {to_purge}\n')
    else:
      print(f'  +{penalty}\n')

  # stage 1 -- doing edges that are owed
  if stage == 1:
    if cooldown > 0 and (image.find('risky') == -1 and image.find('captions') == -1):
      query = """ update settings set value = value - 1 where name = 'cooldown' """
      sth.execute(query)
      dbh.commit()

    if seen is not None and owed > 0 and (cooldown > 0 or owed == 1):
      query = """ update settings set value = value + 1 where name = 'owed' """
      owed += 1
      sth.execute(query)
      dbh.commit()

    if cooldown > 0:
      print(f'  cooldown\n')
    else:
      if owed > 0:
        print(f'  owed: {owed}\n')

      else:
        if red_light:
          print(f'  red light\n')

        else:
          print(f'  green light\n')

  dbh.close()


def ztf():
  # zero to five
  # on average return a low val from 0-5
  # return 0-2 more often than 3-5
  count = 0

  if random.randint(0, 3) == 0:
    count += 1

    if random.randint(0, 3) == 0:
      count += 1

      # nested so far, but now 3 at the same level
      if random.randint(0, 3) == 0:
        count += 1

      if random.randint(0, 3) == 0:
        count += 1

      if random.randint(0, 3) == 0:
        count += 1

  return count


def penalty_adder(spins=1, free_spins=0):
  count = 0
  while spins > 0:
    spins -= 1

    if random.randint(0, 4) == 0:
      count += 1
      if free_spins > 0:
        free_spins -= 1
        spins += 1

  return count


def do_cli_args():
  parser = argparse.ArgumentParser()

  parser.add_argument(
    '-r', '--right',
    default=2,
    type=int,
    help='Number pictures in a row right from Thong Game',
  )

  parser.add_argument(
    '-w', '--wrong',
    default=4,
    type=int,
    help='Number pictures in a row wrong from Thong Game',
  )

  parser.add_argument(
    '-R', '--red',
    help='Full path of red light image',
  )

  parser.add_argument(
    '-f', '--file',
    nargs='+',
    help='Full path of file',
  )

  return parser.parse_args()

if __name__ == '__main__':
  main()
