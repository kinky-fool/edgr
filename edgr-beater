#!/usr/bin/env python3


import threading
import random
import time
import sys
import os

from playsound import playsound

home_dir = os.environ['HOME']

tick_sound = f'{home_dir}/lib/audio/tick.wav'
tock_sound = f'{home_dir}/lib/audio/tock.wav'

# default length of stroke -- tick {stroke_time in sec} tock
stroke_time = 0.32

# time, in seconds, between tick {stroke_time s} tock {pace_slow/pace_fast s}
pace_slow = 0.7
pace_fast = 0.065

# min / max time per step of the journey between waypoints
journey_secs_min = 0.25
journey_secs_max = 1.50

debug_enabled = False

time_start = int(time.time())

speeds = (0, 20, 30, 40, 50, 60, 70, 80, 100)

def main():
  session = beater(tock=False)
  session.start()

  while session.alive:
    if random.randint(0, 1) == 0:
      session.pattern08()
    else:
      session.pattern09()

  cleanup()


def play_sound(file=None, blocking=False):
  import sys
  import threading
  from playsound import playsound

  if file == None:
    print("filename not provided")
    sys.exit(1)

  if not os.path.isfile(file):
    print(f"filename provided ('{filename}') is not a file")
    sys.exit(1)

  if blocking:
    playsound(file)

  else:
    sound_thread = threading.Thread(target=playsound, args=(file,))
    sound_thread.start()

  return


# handle ctrl-c with this function
def cleanup():
  import sys

  elapsed = int(time.time()) - time_start
  time_details = human_sex(elapsed)
  print()
  print(f'{time_details} elapsed')

  sys.exit()


def human_sex(sex=None):
  if sex is None:
    return

  years = 0
  days  = 0
  hours = 0
  mins  = 0

  output = ''

  sex_year  = 365 * 24 * 60 * 60
  sex_day   = 24 * 60 * 60
  sex_hour  = 60 * 60
  sex_min   = 60

  if isinstance(sex, int):
    if sex >= sex_year:
      years = int(sex / sex_year)
      output = f'{output} {years}y'
      sex = sex - (sex_year * years)

    if sex >= sex_day:
      days = int(sex / sex_day)
      output = f'{output} {days}d'
      sex = sex - (sex_day * days)

    if sex >= sex_hour:
      hours = int(sex / sex_hour)
      output = f'{output} {hours}h'
      sex = sex - (sex_hour * hours)

    if sex >= sex_min:
      mins = int(sex / sex_min)
      output = f'{output} {mins}m'
      sex = sex - (sex_min * mins)

    if sex >= 0:
      output = f'{output} {sex}s'

    return output


class beater(object):

  def __init__(self, tock=False):
    import signal

    # handle ctrl-c gracefully with sig_handler()
    signal.signal(signal.SIGINT, self.sig_handler)

    # whether to 'tock' or not -- 'up' stroke
    self.tock               = False

    self.tick_sound         = tick_sound
    self.tock_sound         = tock_sound
    self.stroke_time        = stroke_time
    self.pace_slow          = pace_slow
    self.pace_fast          = pace_fast
    self.journey_secs_min   = journey_secs_min
    self.journey_secs_max   = journey_secs_max

    # flag if session / stroking is done (ctrl c or time-out)
    self.alive              = True

    if tock:
      self.tock = True

    # set the initial pace
    self.stroke_pace = self.pace_slow


  # create and start the ticker thread
  def start(self):
    import threading
    thread = threading.Thread(target = self.__ticker)
    thread.start()


  def blue_balls(self):
    if random.randint(0, 1) == 0:
      self.pattern01()
    else:
      self.pattern00(5, 30)


  def pattern00(self, secs_min=5, secs_max=90):
    if debug_enabled == True:
      print(f'blue balls: {secs_min}-{secs_max} seconds')

    # range for slowing down after fastest
    fake_slow_hi = (abs(self.pace_slow - self.pace_fast) / 3) + self.pace_fast
    fake_slow_lo = (abs(self.pace_slow - self.pace_fast) / 4) + self.pace_fast

    # number of steps to take to get to fastest pace
    steps = random.randint(5, 8)

    # amount to change pace by per step
    step_size = abs(self.pace_slow - self.pace_fast) / steps

    # flag for done with fastest pace
    slow_down = False

    # stay at current (slowest?) pace for random time
    time.sleep(random.uniform(secs_min, secs_max))

    # get the current pace
    pace_cur = self.get_pace()
    pace_new = pace_cur - step_size

    while pace_new > self.pace_fast:
      self.change_pace(pace_new, random.choice((2, 3, 3, 3, 4, 4)))
      time.sleep(random.uniform(5, 10))

      # Update paces
      pace_cur = self.get_pace()
      pace_new = pace_cur - step_size

    # explicitly set fastest pace
    self.change_pace(self.pace_fast, random.choice((0, 1, 1, 1, 3, 4)))

    # stay at fastest pace for some time
    time.sleep(random.uniform(secs_min, secs_max))

    for fake in range(0, random.randint(2, 8)):
      # slow down a little
      self.change_pace(random.uniform(fake_slow_hi, fake_slow_lo),
                        random.choice((2, 3, 3, 3, 4, 4)))

      time.sleep(random.choice((0, 0, 5, 5, 5, 10, 10, 15)))

      self.change_pace(self.pace_fast, random.choice((0, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4)))

      time.sleep(random.choice((5, 5, 10, 10, 15, 15, 30)))

    # Return to the slowest pace
    self.change_pace(self.pace_slow, random.choice((1, 1, 2, 2, 2, 3, 3, 4)))


  def pattern01(self):
    self.change_pace(self.pace_slow, 5)
    time.sleep(random.uniform(5, 10))
    new_pace = ((self.pace_slow - self.pace_fast) * 3 / 4) + self.pace_fast
    self.change_pace(new_pace, 2)
    new_pace = ((self.pace_slow - self.pace_fast) / 2) + self.pace_fast
    self.change_pace(new_pace, 5)
    new_pace = ((self.pace_slow - self.pace_fast) / 4) + self.pace_fast
    self.change_pace(new_pace, 4)
    new_pace = ((self.pace_slow - self.pace_fast) / 8) + self.pace_fast
    self.change_pace(new_pace, 3)
    new_pace = ((self.pace_slow - self.pace_fast) / 16) + self.pace_fast
    self.change_pace(new_pace, 2)
    new_pace = ((self.pace_slow - self.pace_fast) / 32) + self.pace_fast
    self.change_pace(new_pace, 1)

    self.change_pace(self.pace_fast, 0)
    time.sleep(random.choice((5, 10, 15, 30, 45, 60, 90)))


  def pattern02(self):
    pace_spread = abs(self.pace_slow - self.pace_fast)
    # go to slowest speed and stay there for 5 - 25 seconds
    self.change_pace(self.pace_slow, 4)
    time.sleep(random.uniform(5, 25))

    # increase to 3/4 speed
    # TODO: once using percents
    #self.pace_percent(0.75, 3)

    self.change_pace(self.pace_fast + (pace_spread * 0.90), 4)
    time.sleep(random.uniform(3, 10))

    self.change_pace(self.pace_fast + (pace_spread * 0.80), 2)

    self.change_pace(self.pace_fast + (pace_spread * 0.60), 5)
    time.sleep(random.uniform(1, 8))

    self.change_pace(self.pace_fast + (pace_spread * 0.50), 4)
    time.sleep(random.uniform(1, 8))

    for weee in range(0, 3):
      self.change_pace(self.pace_fast + (pace_spread * 0.35), 3)
      time.sleep(random.uniform(1, 8))

      self.change_pace(self.pace_fast + (pace_spread * 0.30), 2)
      time.sleep(random.uniform(1, 8))

      self.change_pace(self.pace_fast + (pace_spread * 0.20), 1)
      time.sleep(random.uniform(1, 30))

      self.change_pace(self.pace_fast, 5)
      time.sleep(random.choice((5, 10, 15, 30, 45, 60, 90)))

      self.change_pace(self.pace_fast + (pace_spread * 0.30), 2)
      time.sleep(random.uniform(1, 15))

      self.change_pace(self.pace_fast + (pace_spread * 0.50), 5)
      time.sleep(random.uniform(5, 10))


  def pattern03(self):
    pace_spread = abs(self.pace_slow - self.pace_fast)
    # go to slowest speed and stay there for 5 - 25 seconds
    self.change_pace(self.pace_slow, 4)
    time.sleep(random.uniform(5, 25))

    self.change_pace(self.pace_fast + (pace_spread * 0.90), 4)
    time.sleep(random.uniform(3, 10))

    self.change_pace(self.pace_fast + (pace_spread * 0.80), 2)

    self.change_pace(self.pace_fast + (pace_spread * 0.50), 4)
    time.sleep(random.uniform(1, 8))

    self.change_pace(self.pace_fast + (pace_spread * 0.30), 3)
    time.sleep(random.uniform(1, 8))

    for weee in range(0, 3):
      self.change_pace(self.pace_fast + (pace_spread * 0.25), 2)
      time.sleep(random.choice((5, 15, 30)))

      self.change_pace(self.pace_fast, 5)
      time.sleep(random.choice((5, 15, 30)))


  def pattern04(self):
    # go to slowest speed and stay there for 5 - 25 seconds
    self.change_percent(0, 0.5)
    time.sleep(random.uniform(5, 25))

    self.change_percent(10, 1)
    time.sleep(random.uniform(3, 10))

    self.change_percent(20, 0.25)

    self.change_percent(50, 2)
    time.sleep(random.uniform(1, 8))

    self.change_percent(70, 1.25)
    time.sleep(random.uniform(1, 8))

    for weee in range(0, random.choice((1, 3, 3, 3, 5, 5))):
      self.change_percent(80, 0.25)
      time.sleep(random.choice((5, 15, 10)))

      self.change_percent(100, 4)
      time.sleep(random.choice((5, 15, 30)))


  def pattern05(self):
    # Keep going back to the back and forth speed change
    blue_balls = 1

    # go to slowest speed and stay there for 5 - 25 seconds
    self.change_percent(0, 0.5)
    time.sleep(random.uniform(5, 25))

    self.change_percent(10, 1)
    time.sleep(random.uniform(3, 10))

    self.change_percent(20, 0.25)

    self.change_percent(50, 2)
    time.sleep(random.uniform(1, 8))

    self.change_percent(70, 1.25)
    time.sleep(random.uniform(1, 8))

    self.change_percent(80, 0.25)
    time.sleep(random.choice((5, 15, 10)))

    while blue_balls == 1:
      self.change_percent(100, 4)
      time.sleep(random.choice((5, 15, 30)))

      self.change_percent(80, 4)
      time.sleep(random.choice((5, 15, 30)))

      if random.randint(0, 1) == 0:
        self.change_percent(100, 4)
        time.sleep(random.choice((5, 15, 30)))

        self.change_percent(80, 4)
        time.sleep(random.choice((5, 15, 30)))

      self.change_percent(100, 4)
      time.sleep(random.choice((5, 15, 30)))

      self.change_percent(80, 0.25)

      if random.randint(0, 1) == 0:
        self.change_percent(50, 0.5)
        time.sleep(random.uniform(5, 30))

        if random.randint(0, 1) == 0:
          self.change_percent(25, 0.25)
          time.sleep(random.uniform(5, 30))

          if random.randint(0, 1) == 0:
            self.change_percent(0, 1)
            time.sleep(random.uniform(10, 45))
            blue_balls = 0


  def pattern06(self):
    self.change_percent(0, 0.5)
    time.sleep(random.uniform(10, 30))

    self.change_percent(15, 1.25)
    time.sleep(random.uniform(5, 15))

    if random.randint(0, 2) == 0:
      return

    self.change_percent(30, 2)
    time.sleep(random.uniform(5, 15))

    if random.randint(0, 2) == 0:
      return

    self.change_percent(45, 0.25)
    time.sleep(random.uniform(5, 15))

    if random.randint(0, 2) == 0:
      return

    self.change_percent(60, 2)
    time.sleep(random.uniform(5, 15))

    # Keep going back to the back and forth speed change
    blue_balls = 1

    while blue_balls == 1:
      self.change_percent(100, 4)
      time.sleep(random.uniform(10, 30))

      self.change_percent(60, 4)
      time.sleep(random.uniform(10, 30))

      if random.randint(0, 2) != 0:
        self.change_percent(100, 4)
        time.sleep(random.uniform(10, 30))

        self.change_percent(60, 4)
        time.sleep(random.uniform(10, 30))

      self.change_percent(100, 4)
      time.sleep(random.uniform(10, 30))

      self.change_percent(60, 0.25)

      if random.randint(0, 1) == 0:
        self.change_percent(45, 0.5)
        time.sleep(random.uniform(5, 15))

        if random.randint(0, 1) == 0:
          self.change_percent(30, 0.25)
          time.sleep(random.uniform(5, 15))

          if random.randint(0, 1) == 0:
            self.change_percent(15, 0.25)
            time.sleep(random.uniform(5, 15))

            if random.randint(0, 1) == 0:
              blue_balls = 0


  def make_faster(self, speed):
    if speed == 0:
      self.change_percent(speeds[1], 5)

    else:
      if random.randint(0, 3) == 0:
        self.change_percent(speeds[speed - 1], 2.5)
      else:
        if speed == len(speeds) - 1:
          self.change_percent(speeds[speed + 1], 20)
        else:
          self.change_percent(speeds[speed + 1], 5)


  def make_slower(self, speed):
    if speed == len(speeds) - 1:
      self.change_percent(speeds[-2], 10)

    else:
      if random.randint(0, 2) != 0:
        self.change_percent(speeds[speed - 1], 5)
      else:
        self.change_percent(speeds[-1], 20)
        time.sleep(random.uniform(20, 90))


  def pattern07(self):
    up = 1

    while up != 0:
      percent_cur = self.get_percent()
      speed = min(range(len(speeds)), key=lambda i: abs(speeds[i] - percent_cur))

      if speed == len(speeds) - 1:
        up = 0

      else:
        self.make_faster(speed)
        time.sleep(random.uniform(5, 10))

    while up == 0:
      percent_cur = self.get_percent()
      speed = min(range(len(speeds)), key=lambda i: abs(speeds[i] - percent_cur))

      if speed == 0:
        up = 1

      else:
        self.make_slower(speed)
        time.sleep(random.uniform(5, 10))


  def pattern08(self):
    up = 1

    while up != 0:
      percent_cur = self.get_percent()
      speed = min(range(len(speeds)), key=lambda i: abs(speeds[i] - percent_cur))

      if speed == len(speeds) - 1:
        up = 0

      else:
        self.make_faster(speed)
        time.sleep(random.uniform(5, 10))

    while up == 0:
      percent_cur = self.get_percent()
      speed = min(range(len(speeds)), key=lambda i: abs(speeds[i] - percent_cur))

      if speed == 0:
        up = 1

      else:
        self.make_slower(speed)
        time.sleep(random.uniform(5, 10))

  def slowly_to_fastest(self):
    speed = self.get_percent()

    while speed < 100:
      if random.randint(0, 2) == 0:
        # increase speed
        new_speed = speed + random.uniform(15, 30)

        if new_speed > 80:
          self.change_percent(100, 10)

        else:
          self.change_percent(new_speed, 5)

      else:
        # decrease speed
        new_speed = speed - random.uniform(5, 50)

        if new_speed < 0:
          new_speed = 0

        if random.randint(0, 5) == 0:
          self.change_percent(0, 2)

        else:
          self.change_percent(speed, 1)

      # update speed
      speed = self.get_percent()


  def pattern09(self):
    #self.slowly_get_faster()
    #time.sleep(random.uniform(3, 6))

    self.change_percent(100, 5)

    rounds = random.randint(2, 10)

    while rounds > 0:
      self.change_percent(random.uniform(70, 90), 0.25)
      self.change_percent(random.uniform(30, 65), 1)

      self.change_percent(random.uniform(70, 80), 1)

      time.sleep(10)

      self.change_percent(100, 10)

      time.sleep(random.choice((10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 30, 60)))

      if random.randint(0, 7) == 0:
        time.sleep(random.choice((30, 30, 30, 30, 30, 60, 60, 60, 60, 60, 90, 180)))

      rounds = rounds - 1

      if random.randint(0, 7) == 0:
        rounds = rounds + 2

      if rounds <= 0 and random.randint(0, 2) == 0:
        rounds = rounds + random.randint(2, 5)


  def pattern10(self):
    sets = random.randint(1, 5)

    while sets > 0:
      reps = random.randint(1, 5)

      while reps > 0:
        time_fast = random.choice((10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 30, 60))

        if random.randint(0, 7) == 0:
          time_fast += random.choice((30, 30, 30, 30, 30, 60, 60, 60, 60, 60, 90, 180))

        self.change_percent(100, 10)
        time.sleep(time_fast)

        time_break = random.choice((10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 1, 5, 20))

        self.change_percent(70, 0.25)
        time.sleep(time_break)

        reps -= 1

        if reps <= 0 and random.randint(0, 2) == 0:
          reps += random.randint(0, 3)

      self.change_percent(55, 1)

      time.sleep(5)

      if random.randint(0, 5) == 0:
        time.sleep(5)

      self.change_percent(70, 1)

      time.sleep(5)

      if random.randint(0, 5) == 0:
        time.sleep(5)

      sets = sets - 1

      if random.randint(0, 7) == 0:
        sets = sets + 2

      if sets <= 0 and random.randint(0, 2) == 0:
        sets += random.randint(2, 5)


  def pattern11(self):
    # go to the slowest pace
    self.change_percent(0, 1.5)

    time.sleep(10)

    self.change_percent(50, 1.5)
    self.change_percent(80, 2)
    self.change_percent(70, 0.5)

    sets = 3

    while sets > 0:
      self.change_percent(80, 0.25)
      self.change_percent(90, 1)
      self.change_percent(70, 1)
      self.change_percent(90, 2)
      self.change_percent(100, 0.5)
      time.sleep(20)
      self.change_percent(70, 1)

      sets = sets - 1


  def pattern12(self):
    # go to the slowest pace
    self.change_percent(0, 1.5)
    time.sleep(20)

    self.change_percent(90, 0.5)

    sets = 10

    while sets > 0:
      self.change_percent(100, 1)
      time.sleep(random.choice((0, 5, 10, 15, 20, 25, 30, 45, 60)))
      self.change_percent(random.choice((70, 80, 90)), 0.25)
      time.sleep(random.choice((0, 5, 10)))
      sets = sets - 1


  def pattern13(self):
    # go to the slowest pace
    self.change_percent(0, 1.5)
    time.sleep(20)

    self.change_percent(90, 0.5)

    sets = random.choice((5, 10, 10, 10, 15, 15, 20, 20, 30))

    while sets > 0:
      new_pace = 90

      if random.randint(0, 2) == 0:
        new_pace = 100

      if random.randint(0, 3) == 0:
        new_pace = 90

      if random.randint(0, 2) == 0:
        new_pace = random.randint(50, 80)

      self.change_percent(new_pace, 1)

      if new_pace == 100:
        time.sleep(random.choice((5, 15, 30, 30, 30, 60, 60, 90)))

      time.sleep(random.choice((0, 5, 10, 15, 20, 25, 30, 45, 60)))

      sets = sets - 1


  # change to a randomly chosen pace waypoint
  def random_pace(self):
    if debug_enabled == True:
      print('random')
    self.change_pace(random.choice(self.waypoints[1:-1]))
    time.sleep(random.uniform(self.waypoint_secs_min,
                              self.waypoint_secs_max))

    if random.randint(0,7) == 0:
      speed = random.randint(1, 4)
      if random.randint(0,2) == 0:
        self.change_pace(self.waypoints[-1], speed)

      else:
        self.change_pace(self.waypoints[0], speed)

      time.sleep(random.uniform(self.waypoint_secs_max * 4,
                                self.waypoint_secs_max * 8))


  def change_percent(self, percent_new=None, step_size=None):
    if not isinstance(percent_new, (float, int)):
      if debug_enabled == True:
        print(f'change_percent failed, percent_new ({percent_new}) not float or int')
        return

    # reduce precision
    percent_new = float("{:.3f}".format(percent_new))

    if step_size is None:
      step_size = 0.5

    if debug_enabled == True:
      print(f'changing to {percent_new}%')

    percent_cur = self.get_percent()

    if percent_cur > percent_new:
      while percent_cur > percent_new:
        percent_next = percent_cur - step_size

        if percent_next < percent_new:
          percent_next = percent_new

        self.set_percent(percent_next)
        time.sleep(random.uniform(self.journey_secs_min,
                                  self.journey_secs_max))

        percent_cur = self.get_percent()

    if percent_new > percent_cur:
      while percent_new > percent_cur:
        percent_next = percent_cur + step_size

        if percent_next > percent_new:
          percent_next = percent_new

        self.set_percent(percent_next)
        time.sleep(random.uniform(self.journey_secs_min,
                                  self.journey_secs_max))

        percent_cur = self.get_percent()


  def change_pace(self, pace_new=None, speed=3):
    if isinstance(pace_new, int) or isinstance(pace_new, float):

      pace_cur = self.get_pace()

      # default speed
      step_size = 0.001

      if speed == 5:
        step_size = 0.05

      if speed == 4:
        step_size = 0.03

      if speed == 3:
        step_size = 0.01

      if speed == 2:
        step_size = 0.005

      if speed == 1:
        step_size = 0.001

      if speed == 0:
        step_size = 0.0005

      # if new pace is larger than current pace, we're getting slower
      if pace_new > pace_cur:
        while pace_new > pace_cur:
          self.set_pace(pace_cur + step_size)
          time.sleep(random.uniform(self.journey_secs_min,
                                    self.journey_secs_max))
          pace_cur = self.get_pace()
      else:
        while pace_cur > pace_new:
          self.set_pace(pace_cur - step_size)
          time.sleep(random.uniform(self.journey_secs_min,
                                    self.journey_secs_max))
          pace_cur = self.get_pace()


  def change_pace_stepped(self, pace_new=None):
    if isinstance(pace_new, int) or isinstance(pace_new, float):

      pace_cur = self.get_pace()

      steps = random.uniform(self.journey_steps_min,
                              self.journey_steps_max)

      step_size = (pace_new - pace_cur) / steps

      # if new pace is larger than current pace, we're getting slower
      for step in range(0, int(steps)):
        self.set_pace(pace_cur + step_size)
        time.sleep(random.uniform(self.journey_secs_min,
                                  self.journey_secs_max))
        pace_cur = self.get_pace()


  # return the current stroke pace
  def get_pace(self):
    return self.stroke_pace


  def get_percent(self):
    spread = abs(self.pace_slow - self.pace_fast)
    pace = self.get_pace()
    pace_rel = pace - self.pace_fast
    return float("{0:.6f}".format(float(100 - (pace_rel / spread * 100))))


  def set_percent(self, percent=None):
    if isinstance(percent, int) or isinstance(percent, float):
      if percent > 100:
        percent = 100

      if percent < 0:
        percent = 0

      spread = abs(self.pace_slow - self.pace_fast)
      # Invert percent, since 'fast' "should" be lower / smaller than 'slow'
      new_pace = self.pace_fast + (spread * (100 - percent) / 100)
      self.stroke_pace = self.pace_fast + (spread * (100 - percent) / 100)

      if debug_enabled == True:
        print(f'pace set to {percent}%')


  # set the stroke pace
  def set_pace(self, pace_new=None):

    if pace_new < self.pace_fast:
      pace_new = self.pace_fast

    if pace_new > self.pace_slow:
      pace_new = self.pace_slow

    if isinstance(pace_new, int) or isinstance(pace_new, float):
      self.stroke_pace = pace_new
      if debug_enabled == True:
        print(f'pace set to {pace_new}')


  # threaded process that does the sound playing
  def __ticker(self):

    while self.alive:
      play_sound(self.tick_sound)

      time.sleep(self.stroke_time)

      if self.tock:
        play_sound(self.tock_sound)

      time.sleep(self.get_pace())


  def sig_handler(self, *args):
    self.alive = False
    cleanup()


if __name__ == '__main__':
  try:
    main()
  except KeyboardInterrupt:
    print('\naborting.')
