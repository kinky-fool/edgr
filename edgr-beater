#!/usr/bin/env python3

def main():
  session = beater(tock=False)
  session.start()

  while session.alive:
    if random.randint(0, 5) == 0:
      session.blue_balls(60, 90)

    elif random.randint(0, 5) == 0:
      session.blue_balls(30, 120)

    else:
      session.blue_balls(5, 90)

  cleanup()

import threading
import random
import time
import sys
import os

from playsound import playsound

home_dir = os.environ['HOME']

tick_sound = f'{home_dir}/lib/audio/tick.wav'
tock_sound = f'{home_dir}/lib/audio/tock.wav'

# default length of stroke -- tick {stroke_time in sec} tock
stroke_time = 0.32

# time, in seconds, between tick {stroke_time s} tock {pace_lo/pace_hi s}
pace_lo = 0.42
pace_hi = 0.15

# min / max time per step of the journey between waypoints
journey_secs_min = 2
journey_secs_max = 5


debug_enabled = False

time_start = int(time.time())

def play_sound(file=None, blocking=False):
  import sys
  import threading
  from playsound import playsound

  if file == None:
    print("filename not provided")
    sys.exit(1)

  if not os.path.isfile(file):
    print(f"filename provided ('{filename}') is not a file")
    sys.exit(1)

  if blocking:
    playsound(file)

  else:
    sound_thread = threading.Thread(target=playsound, args=(file,))
    sound_thread.start()

  return

# handle ctrl-c with this function
def cleanup():
  import sys

  elapsed = int(time.time()) - time_start
  time_details = human_sex(elapsed)
  print()
  print(f'{time_details} elapsed')

  sys.exit()


def human_sex(sex=None):
  if sex is None:
    return

  years = 0
  days  = 0
  hours = 0
  mins  = 0

  output = ''

  sex_year  = 365 * 24 * 60 * 60
  sex_day   = 24 * 60 * 60
  sex_hour  = 60 * 60
  sex_min   = 60

  if isinstance(sex, int):
    if sex >= sex_year:
      years = int(sex / sex_year)
      output = f'{output} {years}y'
      sex = sex - (sex_year * years)

    if sex >= sex_day:
      days = int(sex / sex_day)
      output = f'{output} {days}d'
      sex = sex - (sex_day * days)

    if sex >= sex_hour:
      hours = int(sex / sex_hour)
      output = f'{output} {hours}h'
      sex = sex - (sex_hour * hours)

    if sex >= sex_min:
      mins = int(sex / sex_min)
      output = f'{output} {mins}m'
      sex = sex - (sex_min * mins)

    if sex >= 0:
      output = f'{output} {sex}s'

    return output

class beater(object):

  def __init__(self, tock=False):
    import signal

    # handle ctrl-c gracefully with sig_handler()
    signal.signal(signal.SIGINT, self.sig_handler)

    # whether to 'tock' or not -- 'up' stroke
    self.tock               = False

    self.tick_sound         = tick_sound
    self.tock_sound         = tock_sound
    self.stroke_time        = stroke_time
    self.pace_lo            = pace_lo
    self.pace_hi            = pace_hi
    self.journey_secs_min   = journey_secs_min
    self.journey_secs_max   = journey_secs_max

    # flag if session / stroking is done (ctrl c or time-out)
    self.alive              = True

    if tock:
      self.tock = True

    # set the initial pace
    self.stroke_pace = self.pace_lo

  # create and start the ticker thread
  def start(self):
    import threading
    thread = threading.Thread(target = self.__ticker)
    thread.start()

  def blue_balls(self, secs_min=5, secs_max=90):
    if debug_enabled == True:
      print(f'blue balls: {secs_min}-{secs_max} seconds')

    # get the current pace
    pace_cur = self.get_pace()

    # number of steps to take to get to fastest pace
    steps = random.randint(3, 6)

    # amount to change pace by per step
    step_size = abs(self.pace_lo - self.pace_hi) / steps

    # flag for done with fastest pace
    slow_down = False

    while not slow_down:
      while pace_cur - step_size > pace_hi:
        # get the current pace
        pace_cur = self.get_pace()

        self.change_pace(pace_cur - step_size, random.choice((2, 3, 3, 3, 4, 4)))
        time.sleep(random.uniform(2, 5))

      # explicitly set fastest pace
      self.change_pace(pace_hi, random.choice((0, 1, 1, 1, 2, 2)))

      # stay at fastest pace for some time
      time.sleep(random.uniform(secs_min, secs_max))

      if random.randint(0, 2) == 0:
        # go up 2 steps
        for fake_slow in range(0, 2):
          # get the current pace
          pace_cur = self.get_pace()

          self.change_pace(pace_cur + step_size, random.choice((2, 3, 3, 3, 4, 4)))
          time.sleep(random.uniform(3, 6))

      else:
        slow_down = True

    while self.pace_lo > pace_cur + step_size:
      # get the current pace
      pace_cur = self.get_pace()

      self.change_pace(pace_cur + step_size, random.choice((2, 3, 3, 3, 4, 4)))
      time.sleep(random.uniform(3, 6))

    # explicitly set slowest pace
    self.change_pace(self.pace_lo, random.choice((0, 1, 1, 1, 2, 2)))

    # stay slow for some time
    time.sleep(random.uniform(2, 10))

  # change to a randomly chosen pace waypoint
  def random_pace(self):
    if debug_enabled == True:
      print('random')
    self.change_pace(random.choice(self.waypoints[1:-1]))
    time.sleep(random.uniform(self.waypoint_secs_min,
                              self.waypoint_secs_max))

    if random.randint(0,7) == 0:
      speed = random.randint(1, 4)
      if random.randint(0,2) == 0:
        self.change_pace(self.waypoints[-1], speed)

      else:
        self.change_pace(self.waypoints[0], speed)

      time.sleep(random.uniform(self.waypoint_secs_max * 4,
                                self.waypoint_secs_max * 8))

  def change_pace(self, pace_new=None, speed=3):
    if isinstance(pace_new, int) or isinstance(pace_new, float):

      pace_cur = self.get_pace()

      # default speed
      step_size = 0.01

      if speed == 5:
        step_size = 0.1

      if speed == 4:
        step_size = 0.05

      if speed == 3:
        step_size = 0.01

      if speed == 2:
        step_size = 0.005

      if speed == 1:
        step_size = 0.001

      if speed == 0:
        step_size = 0.0005

      # if new pace is larger than current pace, we're getting slower
      if pace_new > pace_cur:
        while pace_new > pace_cur:
          self.set_pace(pace_cur + step_size)
          time.sleep(random.uniform(self.journey_secs_min,
                                    self.journey_secs_max))
          pace_cur = self.get_pace()
      else:
        while pace_cur > pace_new:
          self.set_pace(pace_cur - step_size)
          time.sleep(random.uniform(self.journey_secs_min,
                                    self.journey_secs_max))
          pace_cur = self.get_pace()

  def change_pace_stepped(self, pace_new=None):
    if isinstance(pace_new, int) or isinstance(pace_new, float):

      pace_cur = self.get_pace()

      steps = random.uniform(self.journey_steps_min,
                              self.journey_steps_max)

      step_size = (pace_new - pace_cur) / steps

      # if new pace is larger than current pace, we're getting slower
      for step in range(0, int(steps)):
        self.set_pace(pace_cur + step_size)
        time.sleep(random.uniform(self.journey_secs_min,
                                  self.journey_secs_max))
        pace_cur = self.get_pace()

  # return the current stroke pace
  def get_pace(self):
    return self.stroke_pace

  # set the stroke pace
  def set_pace(self, pace_new=None):
    if isinstance(pace_new, int) or isinstance(pace_new, float):
      self.stroke_pace = pace_new
      if debug_enabled == True:
        print(f'pace set to {pace_new}')

  # threaded process that does the sound playing
  def __ticker(self):

    while self.alive:
      play_sound(self.tick_sound)

      time.sleep(self.stroke_time)

      if self.tock:
        play_sound(self.tock_sound)

      time.sleep(self.get_pace())

  def sig_handler(self, *args):
    self.alive = False
    cleanup()

if __name__ == '__main__':
  try:
    main()
  except KeyboardInterrupt:
    print('\naborting.')
