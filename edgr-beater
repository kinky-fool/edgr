#!/usr/bin/env python3

import threading
import random
import time
import sys
import os

from playsound import playsound

__home_dir = os.environ['HOME']

__tick_sound = f'{__home_dir}/lib/audio/tick.wav'
__tock_sound = f'{__home_dir}/lib/audio/tock.wav'

# min / max time per step of the journey between waypoints
__journey_secs_min = 5
__journey_secs_max = 20

# min / max time at each waypoint
__waypoint_secs_min = 10
__waypoint_secs_max = 30

# step size for slowing down
__step_slow     = 0.005

# step size for speeding up
__step_fast     = 0.001

# default length of stroke -- down*(stroke_time pause)*up
__stroke_time = 0.34

# default speed-step waypoints for strokes
__waypoints = [
  0.18,
  0.20,
  0.22,
  0.24,
  0.28,
  0.34,
  0.42,
  0.50,
  0.65
]

def play_sound(file=None, blocking=False):
  import threading
  from playsound import playsound

  if sound is None:
    return

  if blocking:
    playsound.playsound(file)

  else:
    thread = threading.Thread(target = playsound.playsound, args = (file,))
    thread.start()

  return

class beater(object,
              tock=False,
              waypoints=None,
              tick_sound=None,
              tock_sound=None,
              step_slow=None,
              step_fast=None,
              stroke_time=None
              journey_secs_min=None,
              journey_secs_max=None,
              waypoint_secs_min=None,
              waypoint_secs_max=None,
            ):

  def __init__(self):
    # whether to 'tock' or not -- 'up' stroke
    self.tock               = False
    self.waypoints          = __waypoints.copy()
    self.tick_sound         = __tick_sound
    self.tock_sound         = __tock_sound
    self.step_slow          = __step_slow
    self.step_fast          = __step_fast
    self.stroke_time        = __stroke_time
    self.journey_secs_min   = __journey_secs_min
    self.journey_secs_max   = __journey_secs_max
    self.waypoint_secs_min  = __waypoint_secs_min
    self.waypoint_secs_max  = __waypoint_secs_max

    if tock:
      self.tock = True

    if waypoints:
      self.waypoints = waypoints.copy()

    if tick_sound:
      self.tick_sound = tick_sound

    if tock_sound:
      self.tock_sound = tock_sound

    if step_slow:
      self.step_slow = step_slow

    if step_fast:
      self.step_fast = step_fast

    if stroke_time:
      self.stoke_time = stroke_time

    # set the initial pace
    self.stroke_pace = random.choice(self.waypoints[1:-1])

  # create and start the ticker thread
  def start(self):
    import threading
    thread = threading.Thread(target = self.__ticker)
    thread.start()

    while True:
      self.change_pace(random.choice(self.waypoints[1:-1]))
      time.sleep(random.uniform(self.waypoint_secs_min,
                                self.waypoint_secs_max))
      if random.randint(0,7) == 0:
        if random.randint(0,2) == 0:
          self.change_pace(self.waypoints[-1])

        else:
          self.change_pace(self.waypoints[0])

        time.sleep(random.uniform(self.waypoint_secs_max,
                                  self.waypoint_secs_max * 3))

  def change_pace(self, pace_new=None):
    if isinstance(pace_new, int) or isinstance(pace_new, float):

      pace_cur = self.get_pace()

      # if new pace is larger than current pace, we're getting slower
      if pace_new > pace_cur:
        while pace_new > pace_cur:
          self.set_pace(pace_cur + self.step_slow)
          time.sleep(random.uniform(self.journey_secs_min,
                                    self.journey_secs_max))
          pace_cur = self.get_pace()
      else:
        while pace_cur > pace_new:
          self.set_pace(pace_cur - self.step_fast)
          time.sleep(random.uniform(self.journey_secs_min,
                                    self.journey_secs_max))
          pace_cur = self.get_pace()


  # return the current stroke pace
  def get_pace(self):
    return self.stroke_pace

  # set the stroke pace
  def set_pace(self, pace_new=None):
    if isinstance(pace_new, int) or isinstance(pace_new, float):
      self.stroke_pace = new_pace

  def __ticker(self):
    while True:
      play_sound(self.tick_sound)

      time.sleep(self.stroke_time)

      if self.tock:
        play_sound(self.tock_sound)

      time.sleep(get_pace())


def main():
  delay = delay_max

  pace_set_time = int(time.time()) + random.randint(15,45)
  get_faster = True

  while True:
    play_sound(tick)
    time.sleep(stroke_time)
    #play_sound(tock)
    time.sleep(delay)

    now = int(time.time())

    if now > pace_set_time:
      if get_faster:
        if delay > delay_max:
          delay = delay_max

        if delay > delay_min:
          delay = delay - step_up
          percent = (delay - delay_min) / (delay_max - delay_min)
          time_at_pace = (random.randint(2, 5) * (1 - percent)) + 1
          pace_set_time = int(time.time()) + time_at_pace

        if delay <= delay_min:
          # get even faster
          delay = delay_min - 0.1
          pace_set_time += random.randint(45, 240)
          get_faster = False

      if not get_faster:
        # make the bonus speed-up from the get-fast crescendo more apparent
        if delay < delay_min:
          delay = delay_min

        if delay < delay_max:
          delay = delay + step_down
          percent = (delay - delay_min) / (delay_max - delay_min)
          time_at_pace = (random.randint(2, 5) * (1 - percent)) + 1
          pace_set_time = int(time.time()) + time_at_pace

        if delay >= delay_max:
          # get slower
          delay += 0.1
          pace_set_time += random.randint(30, 90)
          get_faster = True

  sys.exit()

def play_rand_sound(directory, blocking=False):

  if os.path.isdir(directory):
    filename = ''

    while not os.path.isfile(f'{directory}/{filename}'):
      # select a random file from the provided directory
      filename = random.choice(os.listdir(directory))

    mp3 = f'{directory}/{filename}'

    play_sound(mp3, blocking)

  return

def play_sound(filename=None, blocking=False):

  if filename == None:
    print("filename not provided")
    sys.exit(1)

  if not os.path.isfile(filename):
    print(f"filename provided ('{filename}') is not a file")
    sys.exit(1)

  if blocking:
    playsound(filename)

  else:
    sound_thread = threading.Thread(target=playsound, args=(filename,))
    sound_thread.start()

  return

if __name__ == '__main__':
  main()
