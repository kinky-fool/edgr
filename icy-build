#!/usr/bin/perl

use strict;
use warnings;
use Sessions;

my $image   = $ARGV[0];

my $config_file = "$ENV{HOME}/.config/sessions";
my $config      = read_config("$config_file");
my $state       = read_config("$$config{state_file}");

my $now       = time();
my $elapsed   = $now - $$state{time_start};
my $remaining = $$state{session_length} - $elapsed;

## Do score stuff

my $score   = 0;

foreach my $dir (split(/:/,$$state{image_prize_dirs})) {
  my ($img_dir) = $image =~ m|^(.*/)[^/]+$|;
  if ($img_dir =~ m|^$dir|) {
    $score = 1;
  }
}

foreach my $dir (split(/:/,$$state{image_bonus_dirs})) {
  my ($img_dir) = $image =~ m|^(.*/)[^/]+$|;
  if ($img_dir =~ m|^$dir|) {
    $score = 2;
  }
}

if (($$state{last_score} == 1 and $score == 2) or
      $$state{last_score} == $score) {
  $$state{streak}++;
} else {
  $$state{streak} = 1;
}

$$state{last_score} = $score;

my $old_rank = $$state{bonus_rank};

if ($score > 1) {
  $$state{matches}++;
  $$state{buffer} += $$state{streak} * $score;

  if ($$state{buffer} < $$state{buffer_reset}) {
    $$state{buffer} = $$state{buffer_reset};
  }

  if ($$state{buffer} > $$state{bonus_bump}) {
    $$state{bonus_bump} = $$state{buffer};
  }
}

my $bonus_time = 0;
my $prize_enabled = 0;
my $time_enabled = 0;
my $lube_enabled = 0;

if ($$state{matches} >= $$state{matches_max}) {
  if ($score) {
    $$state{matches} = $$state{matches_max};
    if ($score > 1) {
      $bonus_time = $$state{buffer};
      $$state{bonus_rank} -= $bonus_time;
    }
  } else {
    $$state{matches} = 0;
    $$state{buffer}     = $$state{buffer_reset};
    $$state{bonus_bump} = $$state{buffer_reset};
  }
}

if ($score <= 1) {
  $$state{buffer}--;
}

if ($$state{buffer} <= 0 and $score == 0) {
  $$state{bonus_rank} += $$state{bonus_bump};
  $$state{matches}    -= $$state{bonus_bump};
  if (int(rand(3)) > 0) {
    $$state{matches} = 0;
  }
  if ($$state{bonus_bump} > 0) {
    $$state{bonus_bump}--;
  } else {
    $$state{bonus_bump} = 0;
  }
  $$state{buffer} = $$state{bonus_bump};
}

if ($$state{matches} < 0) {
  $$state{matches} = 0;
}

my $points = $$state{bonus_rank};

my $add_time  = 0;
my $add_lube  = 0;

if ($score) {
  my $limit = $$state{wrong} * $$state{lose} / $$state{win};
  if (!$$state{lubed} and $limit > $$state{bonus_rank}) {
    $$state{lube_next} = $now + $$state{lube_delay};
  }

  my $thresh = $$state{prize_risk_at} * $$state{win} / (2 * $$state{lose});
  if ($$state{bonus_rank} >= $thresh) {
    my $bonus_try = win_bonus($$state{prize_chance},$score,$points);
    if ($bonus_try > $$state{bonus}) {
      $$state{bonus} = $bonus_try;
      $points -= $bonus_try;
      $$state{bonus_rank} -= $bonus_try;
    }
  }

  if ($now >= $$state{time_next} and $elapsed >= $$state{time_delay}) {
    $add_time += win_bonus($$state{time_chance},$score,$points);
    $points -= $add_time;
  }

  if ($now >= $$state{lube_next} and $elapsed >= $$state{lube_delay} and
      $remaining >= $$state{lube_stop}) {
    $add_lube += win_bonus($$state{lube_chance},$score,$points);
    $points -= $add_lube;
  }
}

if ($points < 0) {
  $points = 0;
}

my $message = '';

if ($add_lube) {
  my $lube_message = '';
  $$state{lube_next} = $now + $$state{lube_break};

  if ($$state{bonus} > $$state{win}) {
    # 'Roll' to save
    if (win_bonus($$state{lube_chance},$score,$points) > $$state{bonus}) {
      $$state{bonus} = 1;
    }
  }

  if ($$state{bonus}) {
    if (!$$state{lubed} and !$$state{prize_two}) {
      $$state{prize_two} = 1;
    } elsif ($$state{lubed} and $$state{prize_two}
              and $$state{prize_armed} and $$state{bonus} > $$state{win}) {
      $$state{lube_next} = $now + $$state{prize_lube_break};
      $lube_message = 'use some Icy Hot';

      if ($$state{bonus} > $$state{win} * 2) {
        $lube_message = 'coat your dick with Icy Hot';
        $$state{lube_next} = $now + ($$state{prize_lube_break} * 2);
      }
    }

    $$state{bonus} = 0;
  }

  if ($lube_message eq '') {
    $lube_message = 'lube your little dick';
    if ($$state{prize_two}) {
      $lube_message = 'use Liquid Silk on your little dick';
      # Shorten break for Liquid Silk
      $$state{lube_next} = $now + ($$state{lube_break} * 3/4);
    }
  }

  if ($lube_message ne '') {
    $$state{bonus_rank} -= $add_lube;
    $$state{lubed}++;
    $message = $lube_message;
  }
}

if ($add_time or $bonus_time) {
  if ($$state{bonus} > $$state{win}) {
    $bonus_time += $$state{lose} * $$state{bonus};
    $$state{bonus} = 0;
  }

  # Add time, if the current session time is less than max
  if ($$state{time_max} - 15 > $$state{session_length}) {
    $$state{bonus_rank} -= $add_time;

    my $added_time = add_time($state, $add_time + $bonus_time);

    $$state{time_next} = $now + ($added_time / 2);

    my $add_time_msg = 'stroke just a bit more for me';

    if ($added_time > 20) {
      $add_time_msg = 'stroke a little longer for me';
    }

    if ($added_time > 40) {
      $add_time_msg = 'stroke longer for me';
    }

    if ($added_time > 80) {
      $add_time_msg = 'stroke a bit longer for me';
    }

    if ($added_time > 120) {
      $add_time_msg = 'stroke quite a bit more for me';
    }

    if ($message ne '') {
      $message .= " and...\n  ...$add_time_msg";
    } else {
      $message = "$add_time_msg";
    }
  }

  if ($$state{session_length} >= $$state{time_max} - 15) {
    if ($$state{bonus} > $$state{win}) {
      my $increase_by = ($add_time + $bonus_time) * $$state{time_add};
      $$state{time_max} += $increase_by;
      $$state{bonus_rank} -= $add_time;
      $$state{next_time} = $now + ($increase_by / 2);

      my $longer = "risk some more time";
      if ($message ne '') {
        $message .= " and...\n  ...$longer";
      } else {
        $message = "$longer";
      }
      $$state{bonus} = 0;
    }
  }
}

if ($$state{go_for_green}) {
  $$state{green_light}  = 0;
  $$state{go_for_green} = 0;
  if ($$state{window_green} > 0) {
    my $pics = $$state{window_green};
    if (!int(rand(6))) {
      $pics++;
    }
    if (!int(rand($$state{green_chance})) or ($$state{greens} == 0 and
        (($pics * $$state{image_delay}) > $remaining))) {
      $$state{green_light} = $pics;
    } else {
      printf "   0\n";
    }
  } else {
    printf "   0\n";
  }
}

if ($$state{green_light} > 0) {
  if ($$state{green_light} > $$state{window_green}) {
    printf "   0\n";
  } else {
    printf "   Green Light\n";
  }
  $$state{green_light}--;
}

if ($$state{countdown} > 0) {
  printf "   %i\n", $$state{countdown}--;
  if ($$state{countdown} == 0) {
    $$state{go_for_green} = 1;
  }
}

if (!($$state{countdown} or $$state{green_light} or $$state{go_for_green})) {
  if ($$state{window_yellow} > 0 or $$state{window_green} > 0) {
    my $time_needed = ($$state{window_yellow} + $$state{window_green}) *
                        $$state{image_delay};
    if ($$state{greens} > 0 and int(rand($$state{countdown_chance}))) {
      $time_needed = $$state{window_yellow} * $$state{image_delay};
    }
    if ($$state{green_zone} > $remaining and
        (!int(rand($$state{countdown_chance})) or
        $time_needed > ($remaining + $$state{image_delay}))) {
      $$state{countdown} = $$state{window_yellow};
    }
  }
}

if ($message ne '') {
  printf "  Mistress says %s\n", $message;
}

if ($$state{bonus_rank} < 0) {
  $$state{bonus_rank} = 0;
}

if ($$state{show_rank}) {
  my $rank = $$state{bonus_rank};
  printf " ";
  if ($old_rank > $rank) {
    printf "%s - %s = %s\n", $old_rank, $old_rank - $rank, $rank;
  } elsif ($rank > $old_rank) {
    printf "%s + %s = %s\n", $old_rank, $rank - $old_rank, $rank;
  } else {
    printf "%s\n", $old_rank;
  }
}

my $status = '---';
$status =~ s/-/+/ if ($$state{prize_enabled});
$status =~ s/-/+/ if ($$state{time_enabled});
$status =~ s/-/+/ if ($$state{lube_enabled});

my $matches = sprintf "%s%s",
      '+' x $$state{matches},
      '-' x ($$state{matches_max} - $$state{matches});

my $buffer = sprintf "%s", '+' x $$state{buffer};

my $gauge_count = 0;
my $gauge_max = 0;

$gauge_count++ if (!$$state{prize_timeout});
$gauge_max++;

$gauge_count++ if ($$state{bonus_rank} > $$state{prize_at_rank});
$gauge_max++;

$gauge_count++ if ($$state{prize_enabled});
$gauge_max++;

$gauge_count++ if (!$$state{time_timeout});
$gauge_max++;

$gauge_count++ if ($$state{bonus_rank} > $$state{time_at_rank});
$gauge_max++;

$gauge_count++ if ($$state{end_game});
$gauge_max++;

$gauge_count++ if ($$state{time_max} >
                    $$state{session_length} + $$state{time_add});
$gauge_max++;

$gauge_count++ if ($$state{time_enabled});
$gauge_max++;

$gauge_count++ if (!$$state{lube_timeout});
$gauge_max++;

my $gauge = sprintf "%s%s",
            '+' x $gauge_count,
            '-' x ($gauge_max - $gauge_count);


printf "  $status"  if ($$state{show_status});
printf "  $matches" if ($$state{show_matches});
printf "  $gauge"   if ($$state{show_gauge});
printf "  $buffer"  if ($$state{show_buffer});
printf "\n" if ($$state{show_status} or $$state{show_matches} or
                $$state{show_buffer} or $$state{show_gauge});

if ($score) {
  $$state{bonus_active}-- if ($$state{bonus_active} > 0);
}


write_config($$state{state_file},$state);

sub win_bonus {
  my $chance  = shift;
  my $score   = shift;
  my $rank    = shift;

  my $bonus   = 0;

  foreach my $spin (1 .. $rank) {
    if (!int(rand(int($chance)))) {
      if ($rank - $bonus >= $score) {
        $bonus += $score;
      }

      if ($chance >= 5) {
        $chance = $chance * (100 - $score * 15) / 100;
      }
    }
  }

  return $bonus;
}

sub add_time {
  my $state = shift;
  my $count = shift;

  my $time_added  = 0;
  my $time_to_add = 0;

  for (1 .. $count) {
    $time_to_add += fuzzy($$state{time_add},$$state{fuzzify} + 1);
  }

  my $allowance = $$state{time_max} - $$state{session_length};

  if ($time_to_add > $allowance) {
    if ($allowance > $$state{time_add}) {
      $time_to_add = $allowance;
    } else {
      $time_to_add = 0;
    }
  }

  while ($time_to_add > $time_added) {
    $time_added += extend_session($state);
  }

  return $time_added;
}
