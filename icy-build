#!/usr/bin/perl

use strict;
use warnings;
use Sessions;

my $image   = $ARGV[0];
my $now     = time();

my $config_file = "$ENV{HOME}/.config/sessions";
my $config      = read_config("$config_file");
my $state       = read_config("$$config{state_file}");

my $until_end   = $$state{time_elapsed} - (time() - $$state{time_start});

## Do score stuff

my $score   = 0;

foreach my $dir (split(/:/,$$state{image_prize_dirs})) {
  my ($img_dir) = $image =~ m|^(.*/)[^/]+$|;
  if ($img_dir =~ m|^$dir|) {
    $score = 1;
  }
}

foreach my $dir (split(/:/,$$state{image_bonus_dirs})) {
  my ($img_dir) = $image =~ m|^(.*/)[^/]+$|;
  if ($img_dir =~ m|^$dir|) {
    $score = 2;
  }
}

if (($$state{last_score} and $score) or ($$state{last_score} == $score)) {
  $$state{streak}++;
} else {
  $$state{streak} = 0;
}

my $rank_info = "$$state{bonus_rank}";

if ($score > 0) {
  $$state{buffer} += ($score - 1) * 2;
  if ($score > 1) {
    if ($$state{buffer} < $$state{buffer_reset}) {
      $$state{buffer} = $$state{buffer_reset};
    }
  }
  if ($$state{buffer} <= 0) {
    $$state{buffer} = $$state{buffer_reset};
  }
  if ($$state{buffer} > $$state{bonus_jump}) {
    $$state{bonus_jump} = $$state{buffer};
  }
} else {
  if ($$state{buffer} > 0) {
    $$state{buffer}--;
  }
  if ($$state{buffer} == 0) {
    $$state{bonus_rank} += $$state{bonus_jump};
    $rank_info = sprintf "%s + %s = %s",
                  $rank_info,$$state{bonus_jump},$$state{bonus_rank};
    $$state{matches} -= $$state{bonus_jump};
    if ($$state{matches} < 0) {
      $$state{matches} = 0;
    }
    if ($$state{bonus_jump} > $$state{buffer_reset}) {
      $$state{bonus_jump}--;
    }
    $$state{buffer} = $$state{bonus_jump};
  }
}

if ($score) {
  if ($$state{prize_timeout} > 0) {
    $$state{prize_timeout} -= $score;
    if ($$state{prize_timeout} < 0) {
      $$state{prize_timeout} = 0;
    }
  }

  if ($$state{time_timeout} > 0) {
    $$state{time_timeout} -= $score;
    if ($$state{time_timeout} < 0) {
      $$state{time_timeout} = 0;
    }
  }

  if ($$state{lube_timeout} > 0) {
    $$state{lube_timeout} -= $score;
    if ($$state{lube_timeout} < 0) {
      $$state{lube_timeout} = 0;
    }
  }
}

if (!$$state{prize_timeout} and
      ($$state{bonus_rank} >= $$state{prize_at_rank})) {
  $$state{prize_enabled} = 1;
} else {
  $$state{prize_enabled} = 0;
}

if (!$$state{time_timeout} and $$state{time_for_time} >= $until_end and
    ($$state{bonus_rank} > $$state{time_at_rank})) {
  $$state{time_enabled} = 1;
} else {
  $$state{time_enabled} = 0;
}

if (!$$state{lube_timeout} and $until_end >= $$state{no_more_lube}) {
  $$state{lube_enabled} = 1;
} else {
  $$state{lube_enabled} = 0;
}

my $add_time  = 0;
my $add_lube  = 0;

if ($score > 1) {
  $$state{matches}++;
  if ($$state{matches} >= $$state{matches_max}) {
    $add_time = 1 + $$state{streak};
    $$state{bonus_rank} = int($$state{bonus_rank} / 2);
    $rank_info = sprintf "%s / 2 = %s", $rank_info, $$state{bonus_rank};
    $$state{time_enabled} = 1;
    $$state{matches} = $$state{matches_max};
  }
} else {
  if ($$state{matches} >= $$state{matches_max}) {
    $$state{matches} = 0;
    if ($$state{streak}) {
      $$state{matches} = $$state{matches_max};
    }
  }
}

my $old_rank = $$state{bonus_rank};

if ($$state{lube_enabled}) {
  my $new_rank = win_bonus($$state{lube_chance},$score,$$state{bonus_rank});
  $add_lube = $$state{bonus_rank} - $new_rank;
  $$state{bonus_rank} = $new_rank;
}

if ($$state{time_enabled}) {
  my $new_rank = win_bonus($$state{time_chance},$score,$$state{bonus_rank});
  $add_time += ($$state{bonus_rank} - $new_rank);
  $$state{bonus_rank} = $new_rank;
}

my $message = '';

if ($add_lube > 0) {
  $$state{lube_timeout} = $$state{noop_break};
  my $bonus = $add_lube - win_bonus($$state{lube_chance},$score,$add_lube);

  # Enable Icy Hot
  if ($bonus > 1 and ($$state{prize_two} or !$$state{lubed}) and
      $$state{bonus_rank} >= $$state{prize_risk_at}) {
    $$state{prize_on}   = 1;
    $$state{prize_two}  = 1;
  }

  if ($bonus) {
    print "lube bonus\n";
    # Reset the timeout, even if not enabled or on, the good bonus ;)
    $$state{prize_timeout} = $$state{prize_break};

    if (!$$state{lubed}) {
      $$state{prize_two} = 1;
    }

    if ($$state{prize_on} and $$state{prize_enabled}) {
      $message = 'use some Icy Hot';
      if ($bonus >= 3) {
        $message = 'coat your dick in Icy Hot';
      }
    }
  }

  if ($message eq '' and !$$state{end_game}) {
    $message = 'lube your little dick';
    if ($$state{prize_two} || $$state{prize_on}) {
      $message = 'lube your dick with Liquid Silk';
    }
    $$state{lubed}++;
  }

  if ($message ne '') {
    $$state{lube_timeout} = $$state{lube_break};
  }
}

if ($add_time > 0) {
  $$state{time_timeout} = $$state{noop_break};
  my $bonus = $add_time - win_bonus($$state{time_chance},$score,$add_time);
  if ($bonus > 0) {
    printf "time bonus\n";
  }

  if ($$state{time_elapsed} >= $$state{time_max}) {
    if ($bonus > 0) {
      $$state{time_max} += $bonus * $$state{time_add};
    }
  } else {
    my $added_time = add_time($state,$add_time,$bonus);

    if ($added_time > 0) {
      $$state{time_timeout} = $$state{time_break};
      if ($message ne '') {
        $message .= "...\n   ...and stroke some more";
      } else {
        $message = 'stroke your dick longer for me';
        if (!int(rand(6))) {
          $message = 'edge yourself for me';
        }
      }
    }
  }
}

my $summary = '';
if ($old_rank > $$state{bonus_rank}) {
  $rank_info = sprintf "%s - %s = %s",
          $rank_info, $old_rank - $$state{bonus_rank}, $$state{bonus_rank};
}

if ($old_rank < $$state{bonus_rank}) {
  printf " + %s = %s", $$state{bonus_rank} - $old_rank, $$state{bonus_rank};
}

if ($$state{go_for_green}) {
  $$state{green_light}  = 0;
  $$state{go_for_green} = 0;
  if ($$state{window_green} > 0) {
    my $pics = $$state{window_green};
    if (!int(rand(6))) {
      $pics++;
    }
    if (!int(rand($$state{green_chance})) or ($$state{greens} == 0 and
        (($pics * $$state{image_delay}) >= $until_end))) {
      $$state{green_light} = $pics;
    } else {
      printf "   0\n";
    }
  } else {
    printf "   0\n";
  }
}

if ($$state{green_light} > 0) {
  if ($$state{green_light} > $$state{window_green}) {
    printf "   0\n";
  } else {
    printf "   Green Light\n";
  }
  $$state{green_light}--;
}

if ($$state{countdown} > 0) {
  printf "   %i\n", $$state{countdown}--;
  if ($$state{countdown} == 0) {
    $$state{go_for_green} = 1;
  }
}

if (!($$state{countdown} or $$state{green_light} or $$state{go_for_green})) {
  if ($$state{window_yellow} > 0 or $$state{window_green} > 0) {
    my $time_needed = ($$state{window_yellow} + $$state{window_green}) *
                        $$state{image_delay};
    if ($$state{greens} > 0 and int(rand($$state{countdown_chance}))) {
      $time_needed = $$state{window_yellow} * $$state{image_delay};
    }
    if ($$state{end_game} and (!int(rand($$state{countdown_chance})) or
        $time_needed >= ($until_end + $$state{image_delay}))) {
      $$state{countdown} = $$state{window_yellow};
    }
  }
}

if ($message ne '') {
  printf "  Mistress says %s\n", $message;
}

my $status = '---';
$status =~ s/-/+/ if ($$state{prize_enabled});
$status =~ s/-/+/ if ($$state{time_enabled});
$status =~ s/-/+/ if ($$state{lube_enabled});

my $matches = sprintf "%s%s",
      '+' x $$state{matches},
      '-' x ($$state{matches_max} - $$state{matches});

my $buffer = sprintf "%s", '+' x $$state{buffer};

my $gauge_count = 0;
my $gauge_max = 0;

$gauge_count++ if (!$$state{prize_timeout});
$gauge_max++;

$gauge_count++ if ($$state{prize_on});
$gauge_max++;

$gauge_count++ if ($$state{bonus_rank} >= $$state{prize_at_rank});
$gauge_max++;

$gauge_count++ if ($$state{prize_enabled});
$gauge_max++;

$gauge_count++ if (!$$state{time_timeout});
$gauge_max++;

$gauge_count++ if ($$state{bonus_rank} >= $$state{time_at_rank});
$gauge_max++;

$gauge_count++ if ($$state{end_game});
$gauge_max++;

$gauge_count++ if ($$state{time_max} >=
                    $$state{time_elapsed} + $$state{time_add});
$gauge_max++;

$gauge_count++ if ($$state{time_enabled});
$gauge_max++;

$gauge_count++ if (!$$state{lube_timeout});
$gauge_max++;

my $gauge = sprintf "%s%s",
            '+' x $gauge_count,
            '-' x ($gauge_max - $gauge_count);

printf "  $rank_info\n" if ($$state{show_rank});

printf "  $status"  if ($$state{show_status});
printf "  $matches" if ($$state{show_matches});
printf "  $gauge"   if ($$state{show_gauge});
printf "  $buffer"  if ($$state{show_buffer});
printf "\n" if ($$state{show_status} or $$state{show_matches} or
                $$state{show_buffer} or $$state{show_gauge});

if ($score) {
  $$state{bonus_active}-- if ($$state{bonus_active} > 0);
}

$$state{last_score} = $score;

write_config($$state{state_file},$state);

sub win_bonus {
  my $chance  = shift;
  my $score   = shift;
  my $rank    = shift;

  my $new_rank = $rank;

  foreach my $spin (1 .. $rank) {
    if (!int(rand($chance))) {
      if ($new_rank >= $score) {
        $new_rank = $new_rank - $score;
      }

      if ($chance >= 5) {
        $chance -= int($chance * $score / 4);
      }
    }
  }

  return $new_rank;
}

sub add_time {
  my $state = shift;
  my $count = shift;
  my $bonus = shift;

  my $time_added = 0;

  for (1 .. $count) {
    my $time_to_add = $$state{time_add} + ($$state{time_add} * $bonus);
    $time_to_add = fuzzy($time_to_add,$$state{fuzzify} + 1);

    if ($$state{time_max} >= ($$state{time_elapsed} + $time_to_add)) {
      while($time_to_add > $time_added) {
        $time_added += extend_session($state);
      }
    }
  }

  return $time_added;
}
