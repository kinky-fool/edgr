#!/usr/bin/perl

use strict;
use warnings;
use Sessions;

my $image   = $ARGV[0];

my $config_file = "$ENV{HOME}/.config/sessions";
my $config      = read_config("$config_file");
my $state       = read_config("$$config{state_file}");

my $now       = time();
my $elapsed   = $now - $$state{time_start};
my $remaining = $$state{session_length} - $elapsed;

## Do score stuff

my $score   = 0;

foreach my $dir (split(/:/,$$state{images_special})) {
  my ($img_dir) = $image =~ m|^(.*/)[^/]+$|;
  if ($img_dir =~ m|^$dir|) {
    $score = 1;
  }
}

foreach my $dir (split(/:/,$$state{images_vs})) {
  my ($img_dir) = $image =~ m|^(.*/)[^/]+$|;
  if ($img_dir =~ m|^$dir|) {
    $score = 2;
  }
}

my $vip = 0;
foreach my $dir (split(/:/,$$state{images_vip})) {
  my ($img_dir) = $image =~ m|^(.*/)[^/]+$|;
  if ($img_dir =~ m|^$dir|) {
    $vip   = 1;
    $score = 3;

    my $adjustment = abs(($$state{lube_next} - $now) / 5) * 2;

    my $toggle = 0;
    if (rand($$state{lose}) > rand($$state{win})) {
      $toggle = 1;
    }

    if ($$state{prize_two} and $$state{lubed}) {
      $$state{prize_armed} = $toggle;
      # Cut the time to wait down a bit
      $$state{lube_next} -= $adjustment;
    }

    if (!$$state{lubed}) {
      $$state{prize_two} = $toggle;
      if ($toggle > 0) {
        # Cut the time to wait down a bit
        $$state{lube_next} -= $adjustment;
      }
    }

    if ($$state{lubed} and not ($$state{prize_two} or $$state{lubed})) {
      $$state{lube_next} += $adjustment;
    }
  }
}

if (60 > $remaining) {
  $$state{time_next} -= $score * $score;
}

if ($$state{last_score} == $score or ($$state{last_score} > 1 and $score > 1)) {
  $$state{streak}++;
} else {
  $$state{streak} = 1;
}

$$state{last_score} = $score;

if ($score > 0) {
  my $new_max   = 0;
  my $maxxed    = 0;
  my $offset = $$state{prize_buffer} * $remaining / $$state{session_length};
  my $chance = $$state{prize_chance} + $offset;

  foreach (1 .. $$state{lose} + $score) {
    my $bonus_try =
            win_bonus($chance,$$state{bonus_rank},$score,$$state{lose}*2);
    if ($bonus_try > $$state{lose} * 2) {
      $bonus_try = $$state{lose} * 2;
    }

    if ($bonus_try > 0 and $bonus_try >= $$state{bonus}) {
      $maxxed++;

      if ($bonus_try > $new_max) {
        $new_max = $bonus_try;
      }

      if ($$state{time_next} >= 20) {
        $$state{time_next} -= $bonus_try * $maxxed;
      }

      if ($$state{lubed}) {
        if ($$state{prize_two}) {
          $$state{lube_next} -= $bonus_try * $maxxed;
        } else {
          $$state{lube_next} += $bonus_try * $maxxed;
        }
      } else {
        if ($$state{prize_two}) {
          $$state{lube_next} -= $bonus_try * $maxxed;
        } else {
          $$state{lube_next} += $bonus_try * $maxxed;
        }
      }
    }

    if ($new_max >= $$state{bonus}) {
      $$state{prize_until} = $now + ($$state{prize_time} * $$state{lose});
      if ($new_max > $$state{bonus}) {
        $$state{bonus} = $new_max;
      }
    }
  }

  if ($score > 1) {
    $$state{matches}++;
    $$state{buffer} += $$state{streak} * $score;

    if ($$state{buffer} < $$state{buffer_reset}) {
      $$state{buffer} = $$state{buffer_reset};
    }

    if ($$state{buffer} > $$state{bonus_bump}) {
      $$state{bonus_bump} = $$state{buffer};
    }
  }
}

my $old_rank = $$state{bonus_rank};

my $bonus_time = 0;
my $prize_enabled = 0;
my $time_enabled = 0;
my $lube_enabled = 0;

if ($$state{matches} >= $$state{matches_max}) {
  if ($score) {
    $$state{matches} = $$state{matches_max};
    if ($score > 1) {
      $bonus_time = $$state{buffer};
    }
  } else {
    $$state{matches} = 0;
    $$state{buffer}     = $$state{buffer_reset};
    $$state{bonus_bump} = $$state{buffer_reset};
  }
}

if ($score <= 1) {
  $$state{buffer}--;
}

if ($$state{buffer} <= 0 and $score == 0) {
  $$state{bonus_rank} += $$state{bonus_bump};
  $$state{matches}    -= $$state{bonus_bump};
  if (int(rand(3)) > 0) {
    $$state{matches} = 0;
  }
  if ($$state{bonus_bump} > 0) {
    $$state{bonus_bump}--;
  } else {
    $$state{bonus_bump} = 0;
  }
  $$state{buffer} = $$state{bonus_bump};
}

if ($$state{matches} < 0) {
  $$state{matches} = 0;
}

my $add_time  = 0;
my $add_lube  = 0;

if ($now > $$state{prize_until}) {
  $$state{bonus} = 0;
}

if ($score) {
  if ($now >= $$state{time_next}) {
    my $extra = $$state{time_max} - $$state{time_orig};
    my $left  = $$state{time_max} - $$state{session_length};

    my $offset = $$state{time_buffer} * ($extra - $left) / $extra;
    my $chance = int($$state{time_chance} + $offset);
    $add_time += win_bonus($chance,$$state{bonus_rank},$score,$$state{lose}*2);
  }

  if ($now >= $$state{lube_next} and $remaining >= $$state{no_more_lube}) {
    $add_lube +=
      win_bonus($$state{lube_chance},$$state{bonus_rank},$score,$$state{win});
  }
}

my $cur_bonus = $$state{bonus};

my $message = '';

if ($add_lube) {
  # Chance to save ;)
  if (rand($$state{win}) > rand($$state{bonus})) {
    $$state{bonus} = 0;
  }

  $message = 'lube your little baby dick';

  if ($$state{prize_two} > 0) {
    if ($$state{prize_armed} > 0) {
      $$state{prize_armed} = 0;
      $message = 'use Liquid Fire on your teeny baby dick';

      if (1 > $$state{icy_used}) {
        $$state{icy_used} = 1;
      }

      if ($$state{bonus} > 1 and rand($$state{bonus}) > rand($$state{win})) {
        $message = 'use some Icy Hot';
        if (2 > $$state{icy_used}) {
          $$state{icy_used} = 2;
        }
      }

      if ($$state{bonus} > 3 and rand($$state{bonus}) > rand($$state{win}*2)) {
        $message = 'coat your tiny dick with Icy Hot';
        if (3 > $$state{icy_used}) {
          $$state{icy_used} = 3;
        }
      }
    } else {
      $message = 'use Liquid Silk on your pathetic dick';
    }
  }

  $$state{bonus_rank} -= $add_lube + $$state{bonus};
  $$state{lubed}++;
  $$state{lube_next} = $now + $$state{lube_break};
  $$state{bonus} = 0;
}

if ($add_time or $bonus_time) {
  my $time_points = 0;
  my $added_time = 0;
  my $increase_by = 0;

  if ($$state{time_max} > $$state{session_length}) {
    $added_time = add_time($state, ($add_time + $bonus_time));
    $$state{time_next} = $now + int($added_time * 1.8);

    if ($added_time > 0) {
      $$state{bonus_rank} -= ($add_time + $bonus_time) * ($$state{bonus} + 1);
      $$state{bonus} = 0;
      my $add_time_msg = 'stroke just a bit more for me';

      if ($added_time > 20) {
        $add_time_msg = 'stroke a little longer for me';
      }

      if ($added_time > 40) {
        $add_time_msg = 'stroke longer for me';
      }

      if ($added_time > 80) {
        $add_time_msg = 'stroke a bit longer for me';
      }

      if ($added_time > 120) {
        $add_time_msg = 'stroke quite a bit more for me';
      }

      if ($message ne '') {
        $message .= " and...\n  ...$add_time_msg";
      } else {
        $message = "$add_time_msg";
      }
    }
  }
}

if ($$state{green_light} > 0) {
  printf "  Green Light\n";
  $$state{green_light}--;
}

if ($$state{greens} > 0 and $$state{countdown} < 0 and !$$state{green_light}) {
  my $offset = $$state{green_buffer} * $elapsed / $$state{session_length};
  my $chance = $$state{green_chance} + $$state{green_buffer} - $offset;

  if (!int(rand($chance))) {
    $$state{countdown} = $$state{yellow_pics};
  }
}

if ($$state{countdown} > -1) {
  my $offset = $$state{green_buffer} * $elapsed / $$state{session_length};
  my $chance = $$state{green_chance} + $$state{green_buffer} - $offset;

  printf "  %s\n", $$state{countdown}--;

  if ($$state{countdown} == -1) {
    for (2 .. $$state{win}) {
      if (!int(rand($chance))) {
        $$state{go_for_green} = 1;
      }
    }
  }

  if ($$state{countdown} == 0 and (int(rand(4)))) {
    $$state{countdown} = -2;
    for (2 .. $$state{win}) {
      if (!int(rand($chance))) {
        $$state{go_for_green} = 1;
      }
    }
  }
}

if ($$state{go_for_green} > 0) {
  $$state{green_light} = $$state{green_pics};
  $$state{go_for_green} = 0;
  $$state{greens}--;
}

if ($message ne '') {
  printf "  Mistress says %s\n", $message;
}

if ($$state{bonus_rank} < 0) {
  $$state{bonus_rank} = 0;
}

if ($$state{show_rank}) {
  my $rank = $$state{bonus_rank};
  printf " %s|", "$cur_bonus";
  if ($old_rank > $rank) {
    printf "%s - %s = %s\n", $old_rank, $old_rank - $rank, $rank;
  } elsif ($rank > $old_rank) {
    printf "%s + %s = %s\n", $old_rank, $rank - $old_rank, $rank;
  } else {
    printf "%s\n", $old_rank;
  }
}

write_config($$state{state_file},$state);

sub win_bonus {
  my $chance  = shift;
  my $tries   = shift;
  my $score   = shift;
  my $max     = shift;

  my $bonus   = 0;
  my $tiers   = 4;
  my $max_dip = ($score * 30) / 100 * $chance;

  foreach my $try (1 .. $tries) {
    if (!int(rand($chance - int($bonus / $max * $tiers) * $max_dip / $tiers))) {
      $bonus++;
    }
  }

  if ($bonus > $max) {
    return $max;
  } else {
    return $bonus;
  }
}

sub add_time {
  my $state = shift;
  my $count = shift;

  my $time_added  = 0;
  my $time_to_add = 0;

  for (0 .. $$state{bonus}) {
    for (1 .. $count) {
      $time_to_add += fuzzy($$state{time_add},$$state{fuzzify} + 1);
    }
  }

  $time_to_add = $time_to_add / $$state{win};

  my $allowance = $$state{time_max} - $$state{session_length};

  if ($allowance > 0) {
    if ($time_to_add > $allowance) {
      if ($allowance > $$state{time_add}) {
        $time_to_add = $allowance;
      } else {
        $time_to_add = 0;
      }
    }
  }

  while ($time_to_add > $time_added) {
    $time_added += extend_session($state);
  }

  if ($$state{session_length} > $$state{time_max}) {
    $$state{time_max} = $$state{session_length};
  }

  return $time_added;
}
