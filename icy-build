#!/usr/bin/perl

use strict;
use warnings;
use Sessions;

my $image   = $ARGV[0];

my $config_file = "$ENV{HOME}/.config/sessions";
my $config      = read_config("$config_file");
my $state       = read_config("$$config{state_file}");

## Define score
my $score   = 0;
my $vip     = 0;

foreach my $dir (split(/:/,$$state{images_special})) {
  my ($img_dir) = $image =~ m|^(.*/)[^/]+$|;
  if ($img_dir =~ m|^$dir|) {
    $score = 1;
  }
}

foreach my $dir (split(/:/,$$state{images_vs})) {
  my ($img_dir) = $image =~ m|^(.*/)[^/]+$|;
  if ($img_dir =~ m|^$dir|) {
    $score = 2;
  }
}

foreach my $dir (split(/:/,$$state{images_vip})) {
  my ($img_dir) = $image =~ m|^(.*/)[^/]+$|;
  if ($img_dir =~ m|^$dir|) {
    $vip   = 1;
    $score = 3;
  }
}

if ($$state{score} == $score or ($$state{score} > 1 and $score > 1)) {
  $$state{streak}++;
} else {
  $$state{streak} = 1;
}

$$state{score} = $score;

## Update counters and bonuses and things
my $new_bonus   = 0;
my $bonus_time  = 0;
my $old_rank    = $$state{bonus_rank};

my $now         = time();
my $elapsed     = $now - $$state{time_start};
my $remaining   = $$state{session_length} - $elapsed;

if ($now > $$state{prize_until}) {
  $$state{bonus} = 0;
}

if ($vip) {
  # Update the multiplier, for adding / subtracting time and things
  $$state{multiplier} = rand($$state{lose});

  my $toggle = 0;

  if (rand($$state{lose}) > rand($$state{win})) {
    $toggle = 1;
  }

  if ($$state{prize_disabled} > 0) {
    $toggle = 0;
  }

  if ($elapsed >= $$state{time_orig} and
        $$state{prize_two} and $$state{lubed}) {
    $$state{prize_armed} = $toggle;
  }

  if ($$state{time_orig} > $elapsed and !$$state{lubed}) {
    $$state{prize_two} = $toggle;
  }
}

if ($score > 1) {
  $$state{matches} += $score - 1;
  $$state{buffer}  += $score  * $$state{streak};

  if ($$state{matches} >= $$state{matches_max}) {
    $$state{matches}    = 0;
    $bonus_time         = $$state{buffer};
    $$state{buffer}     = $$state{buffer_reset};
    $$state{bonus_bump} = $$state{buffer_reset};
  }

  if ($$state{buffer} < $$state{buffer_reset}) {
    $$state{buffer} = $$state{buffer_reset};
  }

  if ($$state{buffer} > $$state{bonus_bump}) {
    $$state{bonus_bump} = $$state{buffer};
  }

  my $offset  = $$state{bonus_buffer} * $remaining / $$state{session_length};
  my $chance  = $$state{bonus_chance} + $offset;

  my $max     = $$state{lose} * 2;
  my $tries   = $$state{bonus_rank};

  my $new_max = 0;

  foreach (1 .. $$state{lose} * $score) {
    my $try = win_bonus($chance,$tries,$max);
    if ($try >= $$state{bonus}) {
      $$state{bonus} = $try;
      $new_bonus++;
    }
  }
} else {
  $$state{buffer}--;

  if ($$state{buffer} <= 0 and $score <= 0) {
    $$state{bonus_rank} += $$state{bonus_bump};
    $$state{matches}    -= $$state{bonus_bump};
    if (int(rand(3)) > 0) {
      $$state{matches} = 0;
    }
    if ($$state{bonus_bump} > 0) {
      $$state{bonus_bump}--;
    } else {
      $$state{bonus_bump} = 0;
    }
    $$state{buffer} = $$state{bonus_bump};
  }
}

if ($$state{matches} < 0) {
  $$state{matches} = 0;
}

my $cur_bonus   = $$state{bonus};

# Do time adjustments
my $time_mod = $score * $$state{multiplier};

$$state{time_next} -= $time_mod;

if ($$state{lubed} > 0) {
  if ($$state{prize_two} or $$state{prize_armed}) {
    $$state{lube_next} -= $time_mod;
  } else {
    $$state{lube_next} += $time_mod;
  }
}

if ($score == 0 and !int(rand(6))) {
  if ($$state{prize_two} or $$state{prize_armed} and !int(rand(6))) {
    $$state{lube_next} += $$state{win} * $$state{streak};
  } else {
    $$state{lube_next} -= $$state{win} * $$state{streak};
  }
}

if ($new_bonus > 0) {
  $$state{prize_until} = $now + ($$state{prize_time} * $$state{lose});
}

my $prize_enabled = 0;
my $time_enabled  = 0;
my $lube_enabled  = 0;
my $green_enabled = 0;

if ($elapsed >= $$state{time_min} and $now >= $$state{lube_next}) {
  $lube_enabled = 1;
}

if ($elapsed >= $$state{time_min} and $$state{time_orig} > $elapsed and
    $now >= $$state{time_next}) {
  $time_enabled = 1;
}

if ($$state{prize_armed} and $lube_enabled) {
  $prize_enabled = 1;
}

if ($$state{greens} > 0 and $elapsed > $$state{time_orig}) {
  $green_enabled = 1;
}

# Pick bonuses
my $add_time  = 0;
my $add_lube  = 0;
my $add_prize = 0;

my $extra   = $$state{time_max} - $$state{time_orig};
my $left    = $$state{time_max} - $$state{session_length};

if ($score > 0) {
  if ($time_enabled) {
    my $offset  = $$state{time_buffer} * ($extra - $left) / $extra;
    my $chance  = int($$state{time_chance} + $offset);
    my $tries   = $$state{bonus_rank} * $score;
    my $max     = $$state{lose} * (2 + $$state{bonus});

    $add_time = win_bonus($chance,$tries,$max);
  }

  if ($lube_enabled) {
    $add_lube = win_bonus($$state{lube_chance},$$state{bonus_rank},1);
  }

  if ($prize_enabled) {
    my $offset  = $$state{prize_buffer} * $left / $extra;
    my $chance  = int($$state{prize_chance} + $offset);
    my $tries   = $$state{bonus_rank} * $score;
    my $max     = $$state{lose} * $score;

    $add_prize = win_bonus($chance,$tries,$max);
  }
}

## Do stuff
my $message = '';

if ($add_lube or $add_prize) {
  # Chance to save ;)
  if ($add_lube and $add_prize) {
    if (rand($$state{win}) > rand($$state{bonus})) {
      $add_prize = 0;
    }
  }

  if ($add_prize) {
    $$state{prize_armed} = 0;

    if (1 > $$state{icy_used}) {
      $$state{icy_used} = 1;
    }
    $message = 'use Liquid Fire on your tiny babydick';

    if ($elapsed > $$state{time_orig} and $$state{bonus} > 1 and
        rand($$state{bonus}) > rand($$state{win})) {
      if (2 > $$state{icy_used}) {
        $$state{icy_used} = 2;
      }
      $message = 'use Icy Hot on your useless dick';

      if ($$state{bonus} > $$state{win} and
          rand($$state{bonus}) > rand($$state{win} * 2)) {
        if (3 > $$state{icy_used}) {
          $$state{icy_used} = 3;
        }
        $message = 'coat your pathetic babydick with Icy Hot';
      }
    }
  } elsif ($$state{prize_two} > 0) {
    $message = 'rub Liquid Silk onto your useless dick';
  } else {
    $message = 'lube your pathetic babydick';
  }

  if ($add_prize) {
    $$state{bonus_rank} -= ($add_lube + $add_prize) * ($$state{bonus} + 1);
  } else {
    $$state{bonus_rank}--;
  }

  $$state{lubed}++;
  $$state{lube_next} = $now + $$state{lube_break};
  $$state{bonus} = 0;
}

if (0 > $$state{bonus_rank}) {
  $$state{bonus_rank} = 0;
}

if ($$state{time_maxscore} > $add_time) {
  $add_time = 0;
} else {
  $$state{time_maxscore} = $add_time;
}

$add_time += $bonus_time;
if ($add_time > $$state{bonus_rank}) {
  $add_time = $$state{bonus_rank}
}

if ($add_time and $$state{time_max} > $$state{session_length}) {
  my $added_time = add_time($state,$add_time);
  $$state{time_next} = $now + int($added_time * 1.2);

  if ($added_time > 0) {
    $$state{bonus_rank} -= $add_time;
    $$state{bonus} = 0;

    my $add_time_msg = 'stroke just a bit more for me';

    if ($added_time > 20) {
      $add_time_msg = 'stroke a little longer for me';
    }

    if ($added_time > 40) {
      $add_time_msg = 'stroke longer for me';
    }

    if ($added_time > 80) {
      $add_time_msg = 'stroke a bit longer for me';
    }

    if ($added_time > 120) {
      $add_time_msg = 'stroke quite a bit more for me';
    }

    if ($message ne '') {
      $message .= " and...\n  ...$add_time_msg";
    } else {
      $message = "$add_time_msg";
    }
  }
}

if ($$state{green_light} > 0) {
  printf "  Green Light\n";
  $$state{green_light}--;
}

if ($$state{greens} > 0 and $$state{countdown} < 0 and !$$state{green_light}) {
  my $offset = $$state{green_buffer} * $elapsed / $$state{session_length};
  my $chance = $$state{green_chance} + $$state{green_buffer} - $offset;

  if (!int(rand($chance))) {
    $$state{countdown} = $$state{yellow_pics};
  }
}

if ($$state{countdown} > -1) {
  my $offset = $$state{green_buffer} * $elapsed / $$state{session_length};
  my $chance = $$state{green_chance} + $$state{green_buffer} - $offset;

  printf "  %s\n", $$state{countdown}--;

  if ($$state{countdown} == -1) {
    for (2 .. $$state{win}) {
      if (!int(rand($chance))) {
        $$state{go_for_green} = 1;
      }
    }
  }

  if ($$state{countdown} == 0 and (int(rand(4)))) {
    $$state{countdown} = -2;
    for (2 .. $$state{win}) {
      if (!int(rand($chance))) {
        $$state{go_for_green} = 1;
      }
    }
  }
}

if ($$state{go_for_green} > 0) {
  $$state{green_light} = $$state{green_pics};
  $$state{go_for_green} = 0;
  $$state{greens}--;
}

if ($message ne '') {
  printf "  Mistress says %s\n", $message;
}

if ($$state{bonus_rank} < 0) {
  $$state{bonus_rank} = 0;
}

if ($$state{show_rank}) {
  my $rank = $$state{bonus_rank};
  printf " %s|", "$cur_bonus";
  if ($old_rank > $rank) {
    printf "%s - %s = %s\n", $old_rank, $old_rank - $rank, $rank;
  } elsif ($rank > $old_rank) {
    printf "%s + %s = %s\n", $old_rank, $rank - $old_rank, $rank;
  } else {
    printf "%s\n", $old_rank;
  }
}

write_config($$state{state_file},$state);

sub win_bonus {
  my $chance  = shift;
  my $tries   = shift;
  my $max     = shift;

  my $bonus   = 0;
  my $step    = int($chance / $max);

  foreach my $try (1 .. $tries) {
    my $chance_mod = $chance;

    if ($bonus / $max >= 1 / 5) {
      $chance_mod = $chance - (1 / 4 * $chance);
    }

    if ($bonus / $max >= 2 / 5) {
      $chance_mod = $chance - (1 / 2 * $chance);
    }

    if ($bonus / $max >= 3 / 5) {
      $chance_mod = $chance - (1 / 4 * $chance);
    }

    if ($bonus / $max >= 4 / 5) {
      $chance_mod = $chance;
    }

    if (!int(rand($chance_mod))) {
      $bonus++;
    }

    if ($bonus >= $max) {
      return $bonus;
    }
  }

  return $bonus;
}

sub add_time {
  my $state = shift;
  my $count = shift;

  my $time_added  = 0;
  my $time_to_add = 0;

  for (0 .. $count) {
    $time_to_add += fuzzy($$state{time_add},$$state{fuzzify} + 1);
  }

  $time_to_add = $time_to_add;

  my $allowance = $$state{time_max} - $$state{session_length};

  if ($allowance > 0) {
    if ($time_to_add > $allowance) {
      if ($allowance > $$state{time_add}) {
        $time_to_add = $allowance;
      } else {
        $time_to_add = 0;
      }
    }
  }

  while ($time_to_add > $time_added) {
    $time_added += extend_session($state);
  }

  if ($$state{session_length} > $$state{time_max}) {
    $$state{time_max} = $$state{session_length};
  }

  return $time_added;
}
