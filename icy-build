#!/bin/bash

image=$1

now=$(date +"%s")
source ~/.config/sexy-slideshow
count_file=/tmp/icy-count
icy_enabled_file=/tmp/icy_enabled
message=''

if [[ ! -e "$count_file" ]]; then
  printf '0\n' > "$count_file"
fi

count=$(<"$count_file")

lube_break=180
lube_ok=0
if [[ -e '/tmp/last_lube' ]]; then
  if [[ $((now - $(stat -c "%Y" '/tmp/last_lube'))) -gt $lube_break ]]; then
    lube_ok=1
  fi
else
  lube_ok=1
fi

icy_break=300
icy_ok=0
if [[ -e '/tmp/last_icy' ]]; then
  if [[ $((now - $(stat -c "%Y" '/tmp/last_icy'))) -gt $icy_break ]]; then
    icy_ok=1
  fi
else
  icy_ok=1
fi

icy_enabled=0
if [[ -e "$icy_enabled_file" ]]; then
  icy_enabled=$(stat -c "%Y" "$icy_enabled_file")
fi

if [[ $icy_enabled -lt $now ]]; then
  icy_ok=0
fi

icy_count=0
if [[ -e '/tmp/icy-pics' ]]; then
  icy_count=$(</tmp/icy-pics)
  if [[ $icy_count -gt 0 ]]; then
    echo $((icy_count - 1)) > /tmp/icy-pics
  else
    icy_ok=0
  fi
fi

match=0
for dir in $edge_pics $safe_pics; do
  if [[ "${image%/*}" == "${dir%/*}" ]]; then
    match=1
  fi
done

gap_file=/tmp/icy_gap
if [[ ! -e "$gap_file" ]]; then
  printf '0\n' > "$gap_file"
fi
gap=$(< "$gap_file")

if [[ $match -eq 0 ]]; then
  gap=$((gap + 1))
fi

saves=3
gap_max=$((11 - count))

for luck in $(seq 1 $saves); do
  if [[ $gap -gt $gap_max ]]; then
    count=$((count - 1))
  fi

  gap_max=$((gap_max + luck))
done

if [[ $gap -gt $gap_max ]]; then
  count=0
fi

if [[ $match -eq 1 ]]; then
  if [[ $gap -gt $gap_max ]]; then
    add_pics=0
    for pics in $(seq 1 $((gap - gap_max))); do
      add_pics=$((add_pics + pics))
    done
    add_pics=$((add_pics + $(</tmp/icy-pics)))
    printf '%i\n' "$add_pics" > /tmp/icy-pics
  fi
  gap=0
fi

printf '%i\n' "$gap" > "$gap_file"

add_lube=0
add_time=0

if [[ $match -eq 1 ]]; then
  edge=0
  for dir in $edge_pics; do
    if [[ "${image%/*}" == "${dir%/*}" ]]; then
      edge=1
    fi
  done

  if [[ $edge -eq 1 ]]; then
    count=$((count + 1))
  fi

  if [[ $edge -eq 1 && $icy_ok -eq 1 && \
        $icy_count -eq 1 && $((RANDOM % 3)) -eq 1 ]]; then
    add_lube=$((add_lube + 1))
  fi

  chances=(24 24 18 18 12 12 12 18 18 24 24 18)
  chance=${chances[$count]}
  if [[ $icy_ok -ne 0 || $edge -ne 0 ]]; then
    chance=$((chance / 2))
  fi

  if [[ $lube_ok -eq 1 ]]; then
    if [[ $((RANDOM % chance)) -eq 1 ]]; then
      add_lube=$((add_lube + 1))
    fi
  fi

  if [[ $icy_ok -ne 0 && $edge -ne 0 ]]; then
    chance=$((chance * 2 / 3))

    if [[ $((RANDOM % chance)) -eq 1 ]]; then
      add_lube=$((add_lube + 1))
    fi
  fi

  if [[ $count -gt 10 ]]; then
    count=0

    if [[ $((RANDOM % 4)) -eq 1 && $lube_ok -ne 0 ]]; then
      add_lube=$((add_lube + 1))
    fi

    if [[ $((RANDOM % 3)) -eq 1 && $icy_ok -ne 0 ]]; then
      add_lube=$((add_lube + 1))
    fi

    if [[ $add_lube -ne 0 && ( $icy_ok -ne 0 || $lube_ok -ne 0 ) ]]; then
      if [[ $((RANDOM % 3)) -ne 1 ]]; then
        add_time=$((add_time + 1))
      fi
    else
      add_time=$((add_time + 1))
    fi
  fi
fi

message=''
if [[ $add_lube -gt 0 ]]; then
  if [[ $icy_ok -ne 0 ]]; then
    d1=$((RANDOM % 6 + 1))
    d2=$((RANDOM % 6 + 1))

    if [[ $add_lube -gt 1 ]]; then
      if [[ $((d1 + d2)) -eq 7 ]]; then
        icy_ok=0
      fi

      if [[ $((d1 + d2)) -eq 2 ]]; then
        add_lube=$((add_lube + 1))
      elif [[ $(((d1 + d2) % 2)) -eq 0 ]]; then
        icy_ok=0
      fi
    fi
  fi

  if [[ $icy_ok -ne 0 ]]; then
    count=0

    if [[ $add_lube -gt 2 ]]; then
      message='coat your cock with Icy Hot'
    elif [[ $add_lube -eq 2 ]]; then
      message='lube up your cock...\n    ...with lots of Icy Hot'
    else
      message='lube up your cock...\n    ...with Icy Hot'
    fi

    touch '/tmp/last_icy'
  elif [[ $lube_ok -gt 0 ]]; then
    message='lube up your cock'
    touch '/tmp/last_lube'
  fi
fi

if [[ $add_time -ne 0 ]]; then
  count=0
  if [[ -n "$message" ]]; then
    message="${message}...\n    ...and stroke a bit longer"
  else
    message='enjoy some more stroking'
  fi

  for roll_the_dice in $(seq 1 $((RANDOM % 3 + 1))); do
    if [[ $((RANDOM % 6)) -eq $((RANDOM % 6)) ]]; then
      add_time=$((add_time + 1))
    fi
  done

  max_pace=185
  pacesetter="$HOME/toys/change-pace"
  prog='/tmp/stroke-session'
  for add_some_time in $(seq 1 $((RANDOM % add_time + 1))); do
    start_pace=$(grep -v ^# "$prog" | tail -n1 | awk -F'[ /]' '{print $2}')
    down_pace=$((max_pace - (RANDOM % 25 + 25)))
    up_pace=$((max_pace - (RANDOM % 20)))
    bonus_time=$((RANDOM % 30 + 10))
    for loop_of_time in $(seq 1 $((RANDOM % 3 + 1))); do
      if [[ $((RANDOM % 6 + RANDOM % 6)) -eq 2 ]]; then
        bonus_time=$((RANDOM % 30 + bonus_time))
      fi
    done

    # Go Down
    echo "#icy foo" >> "$prog"
    build=$(((final_pace - down_pace) / 4))
    if [[ $build -lt 0 ]]; then
      build=$((build * -1))
    fi
    if [[ $build -lt 5 ]]; then
      build=5
    fi
    down_time=$((bonus_time / 4))
    $pacesetter -s $start_pace -e $down_pace -p $build -S $down_time >> "$prog"

    # Go Up
    echo "#icy foo" >> "$prog"
    build=$(((max_pace - down_pace) / 4))
    if [[ $build -lt 0 ]]; then
      build=$((build * -1))
    fi
    if [[ $build -lt 5 ]]; then
      build=5
    fi
    bonus_time=$((bonus_time * 3 / 4))
    $pacesetter -s $down_pace -e $up_pace -p $build -S $bonus_time >> "$prog"
  done
fi

if [[ -n "$message" ]]; then
  echo -e "  Mistress says $message"
else
  if [[ $icy_ok -gt 0 ]]; then
    printf '  Icy: %i\n' "$icy_count"
  fi
  if [[ $count -gt 0 ]]; then
    printf '  %i\n' "$count"
  fi
fi

if [[ $match -eq 1 ]]; then
  printf '%i\n' $count > "$count_file"
fi
