#!/usr/bin/perl

use strict;
use warnings;
use Sessions;

my $image   = $ARGV[0];
my $now     = time();
my $message = '';

my $conf_file   = "$ENV{HOME}/.config/sessions";
my $state_file  = "$ENV{HOME}/.config/sessions.state";

my $options = read_conf("$conf_file");
my $state   = read_conf("$state_file");

my $count   = $$state{match_count};

# Initialize lube settings
my $icy_enabled   = 0;
my $lube_enabled  = 0;

$$state{icy_until} = $now + 30;
#$$state{no_icy_until} = $now - 30;
if ($now >= $$state{no_lube_until}) {
  $lube_enabled = 1;
}

if ($$state{icy_active_count} > 0 and
      $$state{icy_until} > $now and $now >= $$state{no_icy_until}) {
  $icy_enabled = 1;
}

# Check image filename for match
my $match = 0;

foreach my $dir (split(/:/,"$$options{match_pics}:$$options{bonus_pics}")) {
  my ($img_dir) = $image =~ m|^(.*/)[^/]+$|;
  if ($img_dir =~ m|^$dir|) {
    $match = 1;
  }
}

my $add_lube  = 0;
my $add_time  = 0;

# Penalize for gaps between matching images
$$state{match_gap}++;

my $max_gap = int(($$options{max_match_count} / 2) - ($count / 2)) + 1;

for my $save (1 .. $$options{saves}) {
  if ($$state{match_gap} > $max_gap) {
    if ($count > 1) {
      $count--;
    }
  }
  #$max_gap += $save;
  $max_gap++;
}

if ($count > 0 and $$state{match_gap} > $max_gap) {
  $$state{icy_active_count} += ($$state{match_gap} - $max_gap);
  $count = 0;
}

if ($match) {
  # The gap between matched pictures is now 0
  $$state{match_gap} = 0;

  # Is this a bonus match?
  my $bonus = 0;
  foreach my $dir (split(/:/,$$options{bonus_pics})) {
    my ($img_dir) = $image =~ m|^(.*/)[^/]+$|;
    if ($img_dir =~ m|^$dir|) {
      $bonus = 1;
    }
  }

  # Not in the loop above because this shouldn't be looped
  if ($bonus) {
    $count++;
    if (!int(rand(4)) && $icy_enabled && $$state{icy_active_count} == 1) {
      $add_lube++;
    }
  }

  my @chances = split(/ /,$$options{chances});
  my $chance = $chances[$count];

  if ($icy_enabled > 0 || $bonus > 0) {
    $chance = $chance / 2;
  }

  if ($lube_enabled) {
    if (int(rand($chance)) == 1) {
      $add_lube++;
    }
  }

  if ($icy_enabled && $bonus) {
    $chance = $chance * 2 / 3;
    if (int(rand($chance)) == 1) {
      $add_lube++;
    }
  }

  if ($count > $$options{max_match_count}) {
    $count = 0;

    if (!int(rand(4)) && ($icy_enabled || $lube_enabled)) {
      $add_lube++;
    }

    if ($add_lube && ($icy_enabled || $lube_enabled)) {
      if (!int(rand(3))) {
        $add_time++;
      }
    } else {
      $add_time++;
    }
  }

  # Update tracked count
  $$state{match_count} = $count;
}

if ($add_lube) {
  if ($icy_enabled and $add_lube > 1) {
    my $dice_roll = int(rand(6)) + int(rand(6)) + 2;

    if ($dice_roll == 2) {
      $add_lube++;
    }

    if ($dice_roll == 7 || $dice_roll % 2 == 0) {
      if (!int(rand(3))) {
        $icy_enabled = 0;
      } else {
        $add_lube = 1;
      }
    }
  }

  if ($icy_enabled) {
    $$state{match_count} = 0;
    $$state{no_icy_until} = $now + $$options{icy_break};
    $message = "lube up your cock...\n    ...with Icy Hot";

    if ($add_lube > 2) {
      $message = "coat your cock with Icy Hot";
    } elsif ($add_lube == 2) {
      $message = "lube up your cock...\n    ...with Icy Hot";
    }
  } elsif ($lube_enabled) {
    $$state{no_lube_until} = $now + $$options{lube_break};
    $message = "lube up your cock";
  }
}

if ($add_time) {
  my $added_time = 0;
  $$state{match_count} = 0;

  foreach (1 .. int(rand(3)) + 1) {
    if (int(rand(6)) == int(rand(6))) {
      $add_time++;
    }
  }

  foreach (1 .. int(rand($add_time)) + 1) {
    if ($$state{max_time} > $$state{run_time}) {
      down_then_up($options,$state);
      $added_time++;
    }
  }

  if ($added_time > 0) {
    if ($message eq '') {
      $message = "enjoy some more stroking";
    } else {
      $message = "$message...\n    and stroke a bit longer";
    }
  }
}

if ($message ne '') {
  printf "  Mistress says %s\n", $message;
} else {
  if ($icy_enabled) {
    printf "  Icy: %i\n", $$state{icy_active_count};
    $$state{icy_active_count}--;
  }

  if ($count) {
    printf "  %i\n", $count;
  }
}

write_conf($state_file,$state);

sub down_then_up {
  my $options     = shift;
  my $state       = shift;

  my $run_time    = 0;
  my $start_pace  = $$state{final_pace};
  my $mid_pace    = $$options{max_pace} - fuzzy($$options{extend_mid});
  my $fast_pace   = $$options{max_pace} - fuzzy($$options{extend_fast});
  my $bonus_time  = fuzzy($$options{extend_bonus});

  for (0 .. int(rand($$options{extend_bonus_multiplier}))) {
    $bonus_time += fuzzy($$options{extend_bonus});
  }

  my $build_time  = abs($start_pace - $mid_pace) / 4;
  my $mid_time    = int(($bonus_time - $build_time) *
                          ($$options{extend_mid_percent} / 100));

  $run_time += extend_session($$options{program_file},$start_pace,
                          $mid_pace,$build_time,$mid_time);

  $$state{final_pace} = $mid_pace;

  my $fast_time = $bonus_time - int($run_time);
  $build_time = abs($fast_pace - $mid_pace) / 4;
  $fast_time -= $build_time;

  $run_time += extend_session($$options{program_file},$mid_pace,
                          $fast_pace,$build_time,$fast_time);

  $$state{final_pace} = $fast_pace;
  $$state{run_time} += $run_time;
}
