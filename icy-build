#!/usr/bin/perl

use strict;
use warnings;
use Sessions;

my $image   = $ARGV[0];
my $now     = time();

my $config_file = "$ENV{HOME}/.config/sessions";
my $config      = read_config("$config_file");
my $state       = read_config("$$config{state_file}");

my $until_end   = $$state{time_elapsed} - (time() - $$state{time_start});

## Do score stuff

my $score   = 0;

foreach my $dir (split(/:/,$$state{image_prize_dirs})) {
  my ($img_dir) = $image =~ m|^(.*/)[^/]+$|;
  if ($img_dir =~ m|^$dir|) {
    $score = 1;
  }
}

foreach my $dir (split(/:/,$$state{image_bonus_dirs})) {
  my ($img_dir) = $image =~ m|^(.*/)[^/]+$|;
  if ($img_dir =~ m|^$dir|) {
    $score = 2;
  }
}

if (($$state{last_score} == 1 and $score == 2) or
      $$state{last_score} == $score) {
  $$state{streak}++;
} else {
  $$state{streak} = 1;
}

$$state{last_score} = $score;

my $old_rank = $$state{bonus_rank};

if ($score > 1) {
  $$state{matches}++;
  $$state{buffer} += $$state{streak} * $score;

  if ($$state{buffer} < $$state{buffer_reset}) {
    $$state{buffer} = $$state{buffer_reset};
  }

  if ($$state{buffer} > $$state{bonus_bump}) {
    $$state{bonus_bump} = $$state{buffer};
  }

  if (!$$state{lubed} and !$$state{prize_two}) {
    foreach (1 .. $$state{lose}) {
      if (!int(rand($$state{prize_two_chance}))) {
        $$state{prize_two} = 1;
      }
    }
  }
}

my $bonus_time = 0;
my $prize_enabled = 0;
my $time_enabled = 0;
my $lube_enabled = 0;

if ($$state{matches} >= $$state{matches_max}) {
  if ($score) {
    $$state{matches} = $$state{matches_max};
    if ($score > 1) {
      $bonus_time += $$state{buffer};
      #$$state{bonus_rank} = int($$state{bonus_rank} / 2);
      $time_enabled = 1;
    }
  } else {
    $$state{matches} = 0;
    $$state{buffer}     = $$state{buffer_reset};
    $$state{bonus_bump} = $$state{buffer_reset};
  }
}

if ($score <= 1) {
  $$state{buffer}--;
}

if ($$state{buffer} <= 0 and $score == 0) {
  $$state{bonus_rank} += $$state{bonus_bump};
  $$state{matches}    -= $$state{bonus_bump};
  if (int(rand(3)) > 0) {
    $$state{matches} = 0;
  }
  if ($$state{bonus_bump} > 0) {
    $$state{bonus_bump}--;
  } else {
    $$state{bonus_bump} = 0;
  }
  $$state{buffer} = $$state{bonus_bump};
}

if ($$state{matches} < 0) {
  $$state{matches} = 0;
}

my $points = $$state{bonus_rank};

if ($bonus_time > $points) {
  $bonus_time = $points;
  $points = 0;
} else {
  $points -= $bonus_time;
}

my $prize_on  = 0;
my $add_time  = 0;
my $add_lube  = 0;

if ($score) {
  my $limit = $$state{wrong} + $$state{lose};
  if ($$state{bonus_rank} > $limit or $$state{lubed}) {
    $$state{lube_timeout} -= $score;
    if ($$state{lube_timeout} < 0) {
      $$state{lube_timeout} = 0;
    }
  }

  $$state{time_timeout} -= $score;
  if ($$state{time_timeout} < 0) {
    $$state{time_timeout} = 0;
  }

  $$state{prize_timeout} -= $score;
  if ($$state{prize_timeout} < 0) {
    $$state{prize_timeout} = 0;
  }

  if (!$$state{prize_timeout}) {
    $prize_enabled = 1;
  }

  if (!$$state{time_timeout} and $$state{time_for_time} >= $until_end and
      ($$state{bonus_rank} > $$state{time_at_rank})) {
    $time_enabled = 1;
  }

  if (!$$state{lube_timeout} and $until_end >= $$state{no_more_lube}) {
    $lube_enabled = 1;
  }

  if ($prize_enabled) {
    $prize_on = win_bonus($$state{prize_chance},$score,$points);
    if ($prize_on > $points) {
      $prize_on = $points;
      $points = 0;
    } else {
      $points -= $prize_on;
    }

    if ($$state{lubed} and $$state{prize_two}) {
      # Ensure lube is on
      $add_lube += 1;
      $prize_on -= 1;
    }
  }

  if ($lube_enabled) {
    $add_lube = win_bonus($$state{lube_chance},$score,$points);
    if ($add_lube > $points) {
      $add_lube = $points;
      $points = 0;
    } else {
      $points -= $add_lube;
    }
  }

  if ($time_enabled) {
    $add_time = win_bonus($$state{time_chance},$score,$points);
    if ($add_time > $points) {
      $add_time = $points;
      $points = 0;
    } else {
      $points -= $add_time;
    }
    $add_time += $bonus_time;
  }

  if ($prize_on and !$$state{lubed} and !$$state{prize_two}) {
    $prize_on = 0;
    $$state{prize_two} = 1;
  }

  if ($prize_on > $$state{win} and $$state{lubed} and !$$state{prize_two}) {
    # If prize is 'on' and not using Liquid Silk, switch to time
    $add_time += 1;
    $add_lube -= 1;
  }
}

my $message = '';

if ($add_lube) {
  # Save lube_timeout in case prize is used instead
  my $lube_timeout = $$state{lube_timeout};

  if (!$lube_timeout) {
    $$state{lubed}++;
    $$state{bonus_rank} -= $add_lube;
    $$state{lube_timeout} = $$state{lube_break} + $$state{lose} * 2;
    $message = 'lube your little dick';
    if ($$state{prize_two}) {
      $message = 'lube your dick with Liquid Silk';
      # Shorter break with Liquid Silk
      $$state{lube_timeout} -= $$state{lose};
    }
  }

  # 'Roll' to save
  if (win_bonus($$state{lube_chance},$score,$points) > $prize_on) {
    $prize_on = 0;
  }

  if ($$state{prize_risk_at} > $old_rank) {
    $prize_on = 0;
  }

  if ($prize_on >= $$state{win} and $$state{lubed} and $$state{prize_two}) {
    $$state{lubed}++;
    $$state{bonus_rank} -= $prize_on;
    # Reset lube_timeout since using Icy Hot instead
    $$state{lube_timeout} = $lube_timeout;
    $$state{prize_timeout} = $$state{prize_break};
    # Reset the timeout, even if not enabled or on, the good bonus ;)
    $message = 'use some Icy Hot';
    if ($prize_on > $$state{win} * 2) {
      $message = 'coat your dick in Icy Hot';
      # Take a longer break, you've earned it ;)
      $$state{prize_timeout} += $$state{prize_break};
    }
  }
}

if ($add_time) {
  $$state{bonus_rank} -= $add_time;
  $$state{time_timeout} = $$state{time_break} + $$state{win} * 2;

  my $add_time_msg = 'stroke just a little bit longer for me';
  if (!int(rand($$state{win}))) {
    $add_time_msg = 'edge yourself for me';
  }

  if ($message ne '') {
    $message .= "...\n ...and $add_time_msg";
  } else {
    $message = "$add_time_msg";
  }

  # 'Roll' to save
  if (win_bonus($$state{time_chance},$score,$points) > $prize_on) {
    $prize_on = 0;
  }

  if ($prize_on > $$state{win}) {
    $$state{bonus_rank} -= $prize_on;
    $$state{time_max} += ($prize_on + $$state{lose}) * $$state{time_add};
    $$state{time_timeout} += $$state{time_break} + $$state{win};

    my $longer = "let's risk even more time";
    if (!int(rand($$state{win}))) {
      $longer = "you hit the max time. fixed.";
    }
    if ($message ne '') {
      $message .= "...\n   and $longer";
    } else {
      $message = "$longer";
    }
  }

  my $added_time = add_time($state,$add_time);
}

if ($$state{go_for_green}) {
  $$state{green_light}  = 0;
  $$state{go_for_green} = 0;
  if ($$state{window_green} > 0) {
    my $pics = $$state{window_green};
    if (!int(rand(6))) {
      $pics++;
    }
    if (!int(rand($$state{green_chance})) or ($$state{greens} == 0 and
        (($pics * $$state{image_delay}) > $until_end))) {
      $$state{green_light} = $pics;
    } else {
      printf "   0\n";
    }
  } else {
    printf "   0\n";
  }
}

if ($$state{green_light} > 0) {
  if ($$state{green_light} > $$state{window_green}) {
    printf "   0\n";
  } else {
    printf "   Green Light\n";
  }
  $$state{green_light}--;
}

if ($$state{countdown} > 0) {
  printf "   %i\n", $$state{countdown}--;
  if ($$state{countdown} == 0) {
    $$state{go_for_green} = 1;
  }
}

if (!($$state{countdown} or $$state{green_light} or $$state{go_for_green})) {
  if ($$state{window_yellow} > 0 or $$state{window_green} > 0) {
    my $time_needed = ($$state{window_yellow} + $$state{window_green}) *
                        $$state{image_delay};
    if ($$state{greens} > 0 and int(rand($$state{countdown_chance}))) {
      $time_needed = $$state{window_yellow} * $$state{image_delay};
    }
    if ($$state{green_zone} > $until_end and
        (!int(rand($$state{countdown_chance})) or
        $time_needed > ($until_end + $$state{image_delay}))) {
      $$state{countdown} = $$state{window_yellow};
    }
  }
}

if ($message ne '') {
  printf "  Mistress says %s\n", $message;
}

if ($$state{show_rank}) {
  my $rank = $$state{bonus_rank};
  printf " ";
  if ($old_rank > $rank) {
    printf "%s - %s = %s\n", $old_rank, $old_rank - $rank, $rank;
  } elsif ($rank > $old_rank) {
    printf "%s + %s = %s\n", $old_rank, $rank - $old_rank, $rank;
  } else {
    printf "%s\n", $old_rank;
  }
}

my $status = '---';
$status =~ s/-/+/ if ($$state{prize_enabled});
$status =~ s/-/+/ if ($$state{time_enabled});
$status =~ s/-/+/ if ($$state{lube_enabled});

my $matches = sprintf "%s%s",
      '+' x $$state{matches},
      '-' x ($$state{matches_max} - $$state{matches});

my $buffer = sprintf "%s", '+' x $$state{buffer};

my $gauge_count = 0;
my $gauge_max = 0;

$gauge_count++ if (!$$state{prize_timeout});
$gauge_max++;

$gauge_count++ if ($$state{prize_on});
$gauge_max++;

$gauge_count++ if ($$state{bonus_rank} > $$state{prize_at_rank});
$gauge_max++;

$gauge_count++ if ($$state{prize_enabled});
$gauge_max++;

$gauge_count++ if (!$$state{time_timeout});
$gauge_max++;

$gauge_count++ if ($$state{bonus_rank} > $$state{time_at_rank});
$gauge_max++;

$gauge_count++ if ($$state{end_game});
$gauge_max++;

$gauge_count++ if ($$state{time_max} >
                    $$state{time_elapsed} + $$state{time_add});
$gauge_max++;

$gauge_count++ if ($$state{time_enabled});
$gauge_max++;

$gauge_count++ if (!$$state{lube_timeout});
$gauge_max++;

my $gauge = sprintf "%s%s",
            '+' x $gauge_count,
            '-' x ($gauge_max - $gauge_count);


printf "  $status"  if ($$state{show_status});
printf "  $matches" if ($$state{show_matches});
printf "  $gauge"   if ($$state{show_gauge});
printf "  $buffer"  if ($$state{show_buffer});
printf "\n" if ($$state{show_status} or $$state{show_matches} or
                $$state{show_buffer} or $$state{show_gauge});

if ($score) {
  $$state{bonus_active}-- if ($$state{bonus_active} > 0);
}


write_config($$state{state_file},$state);

sub win_bonus {
  my $chance  = shift;
  my $score   = shift;
  my $rank    = shift;

  my $bonus   = 0;

  foreach my $spin (1 .. $rank) {
    if (!int(rand(int($chance)))) {
      if ($rank - $bonus >= $score) {
        $bonus += $score;
      }

      if ($chance >= 5) {
        $chance = $chance * (100 - $score * 15) / 100;
      }
    }
  }

  return $bonus;
}

sub add_time {
  my $state = shift;
  my $count = shift;

  my $time_added  = 0;
  my $time_to_add = 0;

  for (1 .. $count) {
    $time_to_add += fuzzy($$state{time_add},$$state{fuzzify} + 1);
  }

  my $allowance = $$state{time_max} - $$state{time_elapsed};

  if ($time_to_add > $allowance) {
    if ($allowance > $$state{time_add}) {
      $time_to_add = $allowance;
    } else {
      $time_to_add = 0;
    }
  }

  while ($time_to_add > $time_added) {
    $time_added += extend_session($state);
  }

  return $time_added;
}
