#!/usr/bin/perl

use strict;
use warnings;
use Sessions;

my $image   = $ARGV[0];
my $now     = time();
my $message = '';

my $config_file = "$ENV{HOME}/.config/sessions";
my $config      = read_config("$config_file");
my $state       = read_config("$$config{state_file}");

my $until_end   = $$state{time_elapsed} - (time() - $$state{time_start});

## Do score stuff

my $score   = 0;

foreach my $dir (split(/:/,$$state{image_prize_dirs})) {
  my ($img_dir) = $image =~ m|^(.*/)[^/]+$|;
  if ($img_dir =~ m|^$dir|) {
    $score = 1;
  }
}

foreach my $dir (split(/:/,$$state{image_bonus_dirs})) {
  my ($img_dir) = $image =~ m|^(.*/)[^/]+$|;
  if ($img_dir =~ m|^$dir|) {
    $score = 2;
  }
}

if ($$state{end_game_start} >= $until_end) {
  $$state{end_game} = 1;
} else {
  $$state{end_game} = 0;
}

if ($score) {
  $$state{prize_timeout}--  if ($$state{prize_timeout} > 0);
  $$state{time_timeout}--   if ($$state{time_timeout} > 0);
  $$state{lube_timeout}--   if ($$state{lube_timeout} > 0);
}

if (!$$state{prize_timeout} and $$state{prize_on} and
    ($$state{prize_rank} > $$state{prize_at_rank})) {
  $$state{prize_enabled} = 1;
} else {
  $$state{prize_enabled} = 0;
}

if (!$$state{time_timeout} and $$state{time_rank}) {
  $$state{time_enabled} = 1;
} else {
  $$state{time_enabled} = 0;
}

if (!($$state{lube_timeout} or $$state{end_game})) {
  $$state{lube_enabled} = 1;
} else {
  $$state{lube_enabled} = 0;
}

my $win_prize = 0;
my $add_lube  = 0;

if ($score) {
  if ($$state{matches} > $$state{matches_cur} and $$state{matches_cur} != 0) {
    $$state{prize_rank} += ($$state{matches} - $$state{matches_cur});
  }
  $$state{matches} = $$state{matches_cur};
  $$state{matches_gap} = 0;

  if ($score > 1) {
    $$state{matches}++;
    if ($$state{matches} >= $$state{matches_max}) {
      $$state{matches_run}++;
      $$state{time_rank} = 2 * $$state{matches_run};
      add_time($state);
      if ($$state{prize_enabled}) {
        my $chances = $$state{prize_rank} - $$state{prize_at_rank};
        foreach (1 .. $chances) {
          if (win_bonus($$state{prize_chance},$score)) {
            $win_prize++;
          }
        }
      }
      $$state{matches} = $$state{matches_max};
    }
  } else {
    $$state{matches_run} = 0;
    if ($$state{matches} >= $$state{matches_max}) {
      $$state{matches} = 0;
    }
  }

  $$state{matches_cur} = $$state{matches};

  foreach my $spin (1 .. $score) {
    if ($$state{time_enabled} and win_bonus($$state{time_chance},$score)) {
      add_time($state);
    }

    if ($$state{lube_enabled} and win_bonus($$state{lube_chance},$score)) {
      $add_lube++;
    }
  }
} else {
  $$state{matches_cur} = $$state{matches};

  if ($$state{matches} >= $$state{matches_max}) {
    $$state{matches_cur} = 0;
    $$state{matches} = 0;
    $$state{prize_rank} = 0;
  }
  $$state{matches_gap}++;
  $$state{matches_run} = 0;
}

my $gap_max = int(($$state{matches_max} - $$state{matches}) / 2 + 2);
my $gap_cur = $$state{matches_gap};

foreach my $save (1 .. $$state{saves}) {
  if ($gap_cur >= $gap_max) {
    if ($$state{matches_cur} > 0) {
      $$state{matches_cur}--;
    }

    $gap_cur = $gap_cur - $gap_max;

    if ($gap_max > 1) {
      $gap_max--;
    }
  }
}

if ($gap_cur >= $gap_max) {
  $$state{time_rank} += 2;
  $$state{matches_cur} = 0;
  $$state{prize_rank} = 0;
}

if ($add_lube > 0) {
  $message = "lube up your cock";
  if ($$state{prize_on} > 0) {
    $message = "lube up your cock...\n    ...with Liquid Silk";
  }
  if ($win_prize == 0) {
    $$state{lube_timeout} = $$state{lube_break};
  }
}

if ($win_prize > 0) {
  $message = "lube up your cock...\n    ...with Icy Hot";
  if ($win_prize > 1) {
    $message = "coat your cock with Icy Hot";
  }

  # Chance to escape Icy Hot
  if (int(rand(6)) == int(rand(6))) {
    $message = "lube up your cock...\n    ...with Liquid Silk";
  }

  $$state{prize_timeout} = $$state{prize_break};
}

if ($$state{time_added}) {
  $$state{time_added} = 0;

  if ($message eq '') {
    $message = 'enjoy some more stroking';
  } else {
    $message .= "...\n     and stroke a bit longer";
  }
}

if ($$state{go_for_green}) {
  $$state{green_light}  = 0;
  $$state{go_for_green} = 0;
  if ($$state{window_green} > 0) {
    my $pics = $$state{window_green};
    if (!int(rand(6))) {
      $pics++;
    }
    if (!int(rand($$state{green_chance})) or ($$state{greens} == 0 and
        (($pics * $$state{image_delay}) >= $until_end))) {
      $$state{green_light} = $pics;
    } else {
      printf "   0\n";
    }
  } else {
    printf "   0\n";
  }
}

if ($$state{green_light} > 0) {
  if ($$state{green_light} > $$state{window_green}) {
    printf "   0\n";
  } else {
    printf "   Green Light\n";
  }
  $$state{green_light}--;
}

if ($$state{countdown} > 0) {
  printf "   %i\n", $$state{countdown}--;
  if ($$state{countdown} == 0) {
    $$state{go_for_green} = 1;
  }
}

if (!($$state{countdown} or $$state{green_light} or $$state{go_for_green})) {
  if ($$state{window_yellow} > 0 or $$state{window_green} > 0) {
    my $time_needed = ($$state{window_yellow} + $$state{window_green}) *
                        $$state{image_delay};
    if ($$state{greens} > 0 and int(rand($$state{countdown_chance}))) {
      $time_needed = $$state{window_yellow} * $$state{image_delay};
    }
    if ($$state{end_game} and (!int(rand($$state{countdown_chance})) or
        $time_needed >= ($until_end + $$state{image_delay}))) {
      $$state{countdown} = $$state{window_yellow};
    }
  }
}

if ($message ne '') {
  printf "  Mistress says %s\n", $message;
}

my $status = '---';
$status =~ s/-/+/ if ($$state{prize_enabled});
$status =~ s/-/+/ if ($$state{time_enabled});
$status =~ s/-/+/ if ($$state{lube_enabled});
printf "  $status  ";

printf '+' x $$state{matches_cur};
printf '-' x ($$state{matches_max} - $$state{matches_cur});
printf '  ';

my $can_miss = 0;
if ($gap_max > $gap_cur) {
  $can_miss = $gap_max - $gap_cur;
}

printf '+' x $can_miss;
printf "\n";

if ($score) {
  $$state{bonus_active}-- if ($$state{bonus_active} > 0);
}

write_config($$state{state_file},$state);

sub win_bonus {
  my $chance  = shift;
  my $score   = shift;
  return 0 unless $score;

  if ($score > 1) {
    $chance -= 2;
  }

  if ($chance < 1) {
    $chance = 1;
  }

  if (!int(rand($chance))) {
    return 1;
  }
  return 0;
}

sub add_time {
  my $state = shift;
  my $time_added = 0;

  if ($$state{time_rank} > 0) {
    my $time_to_add = fuzzy($$state{time_add} * $$state{time_rank});
    my $potential = $$state{time_elapsed} + $time_to_add;
    if ($$state{time_max} >= $potential) {
      while ($time_to_add > $time_added) {
        $time_added += extend_session($state);
      }
    }
  }

  $$state{time_added} += $time_added;
  # Reset the time_rank
  $$state{time_rank} = 0;
  # Reset the time timeout
  $$state{time_timeout} = $$state{time_break};
}
