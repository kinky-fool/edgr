#!/usr/bin/perl

use strict;
use warnings;
use Sessions;

my $image   = $ARGV[0];
my $now     = time();
my $message = '';

my $config_file = "$ENV{HOME}/.config/sessions";
my $config      = read_config("$config_file");
my $state       = read_config("$$config{state_file}");

my $until_end   = $$state{time_elapsed} - (time() - $$state{time_start});

## Do score stuff

my $score   = 0;

foreach my $dir (split(/:/,$$state{image_prize_dirs})) {
  my ($img_dir) = $image =~ m|^(.*/)[^/]+$|;
  if ($img_dir =~ m|^$dir|) {
    $score = 1;
  }
}

foreach my $dir (split(/:/,$$state{image_bonus_dirs})) {
  my ($img_dir) = $image =~ m|^(.*/)[^/]+$|;
  if ($img_dir =~ m|^$dir|) {
    $score = 2;
  }
}

if (($$state{last_score} and $score) or ($$state{last_score} == $score)) {
  $$state{streak}++;
} else {
  $$state{streak} = 0;
}

if ($score > 0) {
  $$state{buffer} = $$state{buffer_max};
  $$state{buffer_cur} = $$state{buffer_max};
} else {
  $$state{buffer}--;
  if ($$state{buffer} <= 0) {
    if ($$state{buffer_cur} > 0) {
      $$state{buffer_cur}--;
    }
    $$state{buffer} = $$state{buffer_cur};
    $$state{bonus_rank}++;
    if ($$state{matches} > 0) {
      $$state{matches}--;
    }
  }
}

if ($$state{end_game_start} >= $until_end) {
  $$state{end_game} = 1;
} else {
  $$state{end_game} = 0;
}

if ($score) {
  $$state{prize_timeout}--  if ($$state{prize_timeout} > 0);
  $$state{time_timeout}--   if ($$state{time_timeout} > 0);
  $$state{lube_timeout}--   if ($$state{lube_timeout} > 0);
}

if (!$$state{prize_timeout} and $$state{prize_on} and
    ($$state{bonus_rank} > $$state{prize_at_rank})) {
  $$state{prize_enabled} = 1;
} else {
  $$state{prize_enabled} = 0;
}

if (!$$state{time_timeout} and $$state{bonus_rank}) {
  $$state{time_enabled} = 1;
} else {
  $$state{time_enabled} = 0;
}

if (!($$state{lube_timeout} or $$state{end_game})) {
  $$state{lube_enabled} = 1;
} else {
  $$state{lube_enabled} = 0;
}

my $add_time  = 0;
my $win_prize = 0;
my $add_lube  = 0;

if ($score > 1) {
  $$state{matches}++;
  if ($$state{matches} >= $$state{matches_max}) {
    $add_time = 1 + $$state{streak};
    $$state{bonus_rank} = 1 + ($$state{streak} * 2);
    $$state{matches} = $$state{matches_max};
  }
} else {
  if ($$state{matches} >= $$state{matches_max}) {
    $$state{matches} = 0;
    $$state{bonus_rank} = 0;
    if ($$state{streak}) {
      $$state{matches} = $$state{matches_max};
    }
  }
}

if ($$state{lube_enabled}) {
  foreach my $spin (1 .. (($$state{bonus_rank} + 1) * $score)) {
    if (win_bonus($$state{lube_chance},$add_lube * 5)) {
      $add_lube++;
      if ($$state{bonus_rank} > 0) {
        $$state{bonus_rank}--;
      }
    }
  }
}

if ($$state{time_enabled}) {
  foreach my $spin (1 .. ($$state{bonus_rank} * $score)) {
    if (win_bonus($$state{time_chance},$add_time * 10)) {
      $add_time++;
      if ($$state{bonus_rank} > 0) {
        $$state{bonus_rank}--;
      }
    }
  }
}

if ($$state{prize_enabled}) {
  foreach my $spin (1 .. ($$state{bonus_rank} * $score)) {
    if (win_bonus($$state{prize_chance},$win_prize * 15)) {
      $win_prize++;
      if ($$state{bonus_rank} > 0) {
        $$state{bonus_rank}--;
      }
    }
  }
}

if ($add_lube) {
  $$state{lube_timeout} = $$state{lube_break};
  $message = 'use some lube';
  if ($$state{prize_on}) {
    $message = 'use some Liquid Silk';
  }
  $$state{lubed}++;
  # Chance for respite
  if ($win_prize and win_bonus($$state{lube_chance},$add_lube*3)) {
    $win_prize = 0;
  }
}

if ($win_prize) {
  $$state{prize_timeout} = $$state{prize_break};
  $message = 'use some Icy Hot';
  if ($win_prize > 3) {
    $message = 'coat your cock with Icy Hot';
  }
}

if ($add_time) {
  $$state{time_timeout} = $$state{time_break};
  my $added_time = 0;

  foreach my $time (1 .. $add_time) {
    $added_time += add_time($state);
  }

  if ($added_time > 0) {
    if ($message ne '') {
      $message .= "...\n   ...and stroke a little longer.";
    } else {
      $message = 'enjoy some more time stroking.';
      if (!int(rand(6))) {
        $message = 'get yourself close to the edge.';
      }
    }
  }
}

if ($$state{go_for_green}) {
  $$state{green_light}  = 0;
  $$state{go_for_green} = 0;
  if ($$state{window_green} > 0) {
    my $pics = $$state{window_green};
    if (!int(rand(6))) {
      $pics++;
    }
    if (!int(rand($$state{green_chance})) or ($$state{greens} == 0 and
        (($pics * $$state{image_delay}) >= $until_end))) {
      $$state{green_light} = $pics;
    } else {
      printf "   0\n";
    }
  } else {
    printf "   0\n";
  }
}

if ($$state{green_light} > 0) {
  if ($$state{green_light} > $$state{window_green}) {
    printf "   0\n";
  } else {
    printf "   Green Light\n";
  }
  $$state{green_light}--;
}

if ($$state{countdown} > 0) {
  printf "   %i\n", $$state{countdown}--;
  if ($$state{countdown} == 0) {
    $$state{go_for_green} = 1;
  }
}

if (!($$state{countdown} or $$state{green_light} or $$state{go_for_green})) {
  if ($$state{window_yellow} > 0 or $$state{window_green} > 0) {
    my $time_needed = ($$state{window_yellow} + $$state{window_green}) *
                        $$state{image_delay};
    if ($$state{greens} > 0 and int(rand($$state{countdown_chance}))) {
      $time_needed = $$state{window_yellow} * $$state{image_delay};
    }
    if ($$state{end_game} and (!int(rand($$state{countdown_chance})) or
        $time_needed >= ($until_end + $$state{image_delay}))) {
      $$state{countdown} = $$state{window_yellow};
    }
  }
}

if ($message ne '') {
  printf "  Mistress says %s\n", $message;
}

my $status = '---';
$status =~ s/-/+/ if ($$state{prize_enabled});
$status =~ s/-/+/ if ($$state{time_enabled});
$status =~ s/-/+/ if ($$state{lube_enabled});
printf "  $status  ";

printf '+' x $$state{matches};
printf '-' x ($$state{matches_max} - $$state{matches});
printf '  ';

printf '+' x $$state{buffer};
printf "\n";

if ($score) {
  $$state{bonus_active}-- if ($$state{bonus_active} > 0);
}

$$state{last_score} = $score;

write_config($$state{state_file},$state);

sub win_bonus {
  my $base    = shift;
  my $offset  = shift;

  my $chance = $base - $offset;

  if ($chance < 1) {
    $chance = 1;
  }

  if (!int(rand($chance))) {
    return 1;
  }

  return 0;
}

sub add_time {
  my $state = shift;
  my $time_added = 0;

  my $time_to_add = $$state{time_add};
  if ($$state{fuzzify}) {
    $time_to_add = fuzzy($time_to_add);
  }
  if ($$state{time_max} >= ($$state{time_elapsed} + $time_to_add)) {
    while($time_to_add > $time_added) {
      $time_added += extend_session($state);
    }
  }

  return $time_added;
}
