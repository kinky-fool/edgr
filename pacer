#!/usr/bin/perl

use strict;
use warnings;

use Math::Random;
use Getopt::Long;

srand("$$" . time);

my $beat_maker  = "$ENV{HOME}/toys/change-pace";

my $min_pace    = 95;
my $max_pace    = 185;

# The 'end zones' (in percent)
my $low_end     = 30;
my $high_end    = 80;

# Real pace and range are set further below, so max/min/end can be args
my $pace        = 0;
my $field       = 0;

my @dice        = ();

my $time        = 15;
my $extra_time  = 5;
my $min_time    = 0;
my $max_time    = 0;
my $run_time    = 0;
my $elapsed     = 0;

my $base_step   = 15;
my $avg_steady  = 5;
my $avg_build   = 3;
my $finished    = 0;

# % chance time will be added
my $add_pct     = 30;
# % chance time will be removed
my $sub_pct     = 15;

# Number of times that $pace might jump to $max_pace
my $evil        = 5;
# Number of times pace needs to hit the max or min pace
my $maxes       = 0;
my $mins        = 0;

my $fuzzify     = 1;
my $relief      = 0;
my $direction   = 1;
my $streak      = fuzzy(5);
my $hit_limit   = 5;

# Reduce chances of starting with a streak going
if (int(rand($streak))) {
  $streak = 0;
}

GetOptions(
  "max=i"     => \$max_pace,
  "min=i"     => \$min_pace,
  "pace=i"    => \$pace,
  "evil=i"    => \$evil,
  "maxes=i"   => \$maxes,
  "mins=i"    => \$mins,
  "time=f"    => \$time,
  "extra=f"   => \$extra_time,
  "add=f"     => \$add_pct,
  "sub=f"     => \$sub_pct,
  "dice=s"    => \@dice,
) or die("Error in args.\n");


$min_time = $time * 60;
$field = $max_pace - $min_pace;
# Set the pace to just outside of the low end zone
$pace = $min_pace + int($field * ($low_end / 100)) + 5;

if (@dice) {
  my $seconds = 0;
  foreach my $dice (@dice) {
    my ($count,$sides,$low,$high) = split(/:/,$dice);
    if (!$sides) {
      $sides = 6;
    }
    if (!$low) {
      $low = 0;
    }
    if (!$high) {
      $high = 0;
    }
    my @rolls = ();
    for (1 .. $count + $low + $high) {
      push(@rolls,int(rand($sides)+1));
    }
    print STDERR "Dice Rolled: @rolls\n";
    my @used = ();
    # Discard $low lowest dice
    @used = (sort { $a <=> $b } @rolls)[$low .. $#rolls];
    # Discard $high highest dice
    @used = (sort { $b <=> $a } @used)[$high .. $#used];
    foreach my $spots (@used) {
      $seconds += $spots * 60;
    }
    print STDERR "Dice Chosen: @used\n";
  }
  $min_time = $seconds;
}

$max_time = $min_time + ($extra_time * 60);
$run_time = $min_time;

while ($finished == 0) {
  if ($streak > 0) {
    $streak--;
  } else {
    if (!int(rand(4))) {
      $direction *= -1;
    }
    if (!int(rand(4))) {
      $streak = fuzzy(3);
    }
  }

  # Adjust $run_time
  if ($add_pct > rand(100)) {
    $run_time += fuzzy(30);
  }

  if ($sub_pct > rand(100)) {
    $run_time -= fuzzy(30);
  }

  my $percent = ($pace - $min_pace) / $field;
  my $step = int($base_step * $percent);

  if ($direction < 0) {
    $step = $base_step - $step;
  }

  $step = $step + fuzzy(5);

  if ($fuzzify) {
    $step = fuzzy($step);
  }

  # Set the new pace
  my $new_pace = $pace + ($step * $direction);

    my $close = $max_pace - $pace;
    if ($close > 0) {
  if ($percent*100 >= $high_end) {
      # Not done yet!
      $direction = 1;
      # Take smaller steps
      $new_pace = $pace + int($step / 2);
      if ($new_pace > $max_pace) {
        if (!int(rand($close))) {
          $new_pace = $pace + int(rand($max_pace - ($pace + 1)) + 1);
        } else {
          $new_pace = $max_pace;
        }
      }
    }
    # Chance that pace decreases to ~half higher closer to $max_pace
    if (!int(rand($close)) or $close <= 0) {
      $new_pace = $min_pace + int($field * (fuzzy(50) / 100));
    }
  } elsif ($low_end >= $percent*100) {
    my $close = $pace - $min_pace;
    if ($close > 0) {
      $direction = -1;
      # Take larger steps
      $new_pace = $pace - int($step * 1.25);
      if ($min_pace > $new_pace) {
        $new_pace = $min_pace;
      }
    }
    # Chance that pace increases to ~half higher closer to $min_pace
    if (!int(rand($close)) or $close <= 0) {
      $new_pace = $min_pace + int($field * (fuzzy(50) / 100));
    }
    if ($evil) {
      if (!int(rand(fuzzy($evil)))) {
        $evil--;
        $new_pace = $max_pace - ($step / 2);
      }
    }
  }

  if ($elapsed > $min_time and !$relief and !int(rand(fuzzy(3)))) {
    $new_pace = $max_pace;
    $relief = fuzzy(4);
  }

  if ($new_pace >= $max_pace) {
    $maxes--;
    $new_pace = $max_pace;
  }

  if ($new_pace <= $min_pace) {
    $mins--;
    $new_pace = $min_pace;
  }

  if ($pace == $new_pace) {
    print STDERR "pace = new pace; bad math somewhere\n";
  }

  my $steady = $avg_steady;

  if ($percent > 50) {
    $steady = $steady + int(2 * $steady * ($percent - 50) / 50);
  } else {
    $steady = $steady + int(2 * $steady * (50 - $percent) / 50);
  }

  if ($fuzzify) {
    $steady = fuzzy($steady);
  }

  my $delta_pct = ($new_pace + $pace) / $field;
  my $build = $avg_build + int(2 * $avg_build * $delta_pct);

  if ($fuzzify) {
    $build = fuzzy($build);
  }

  $new_pace = int($new_pace);

  my $command = "$beat_maker -s $pace -e $new_pace -p $build -S $steady";
  if (open my $pipe,'-|',"$command") {
    foreach my $line (<$pipe>) {
      if ($line =~ /# ([0-9\.]+) seconds/i) {
        $elapsed += $1;
      }
      print $line;
    }
  } else {
    print STDERR "Could not run $command: $!\n";
    exit 1;
  }

  # Prep for the next period
  $pace = $new_pace;

  if ($pace >= $max_pace) {
    $direction = -1;
  }

  if ($min_pace >= $pace) {
    $direction = 1;
  }

  if ($elapsed > $min_time) {
    if ($relief > 0) {
      $relief--;
      $direction = -1;
    }

    if ($elapsed > $max_time) {
      $finished = 1;
    }

    if ($elapsed > $run_time and $maxes <= 0 and $mins <= 0) {
      $finished = 1;
    }
  }
}

print STDERR "Approximately ",sec2human($elapsed),"\n";

sub sec2human {
  my $secs = shift;
  if ($secs >= 365*24*60*60) {
    return sprintf '%.1f years', $secs/(365+*24*60*60);
  } elsif ($secs >= 24*60*60) {
    return sprintf '%.1f days', $secs/(24*60*60);
  } elsif ($secs >= 60*60) {
    return sprintf '%.1f hours', $secs/(60*60);
  } elsif ($secs >= 60) {
    return sprintf '%.1f minutes', $secs/60;
  } else {
    return sprintf '%.1f seconds', $secs;
  }
}

sub fuzzy {
  my $num   = shift;

  # Control how far to deviate from $num
  my $skew = int(rand(3))+2;
  # Lean toward 0 or 2 * $num
  my $lean = int(rand(3))+2;
  my $point = 1;
  # "Flip a coin" to determine the direction of the lean
  if (int(rand(2))) {
    $point = -1;
  }

  my $result = $num;

  for (1 .. int($num)) {
    if (!int(rand($skew))) {
      if (int(rand($lean))) {
        $result += $point;
      } else {
        $result += ($point * -1);
      }
    }
  }
  return $result;
}
