#!/usr/bin/perl

use strict;
use warnings;

use Math::Random;
use Getopt::Long;

srand("$$" . time);

my $hard_max    = 190;
my $hard_min    = 80;
my $base_max    = $hard_min + ($hard_max - $hard_min) * 7 / 10;
my $base_min    = $hard_min + ($hard_max - $hard_min) * 3 / 10;

my $min         = $base_min;
my $max         = $base_max;

my $pace        = int(rand($max - $min)) + $min;
my $evil        = 1;
my $count       = 5;


my $minutes     = 15;
my $seconds     = 0;

GetOptions(
  "hardmax=i" => \$hard_max,
  "hardmin=i" => \$hard_min,
  "max=i"     => \$max,
  "min=i"     => \$min,
  "pace=i"    => \$pace,
  "evil=i"    => \$evil,
  "count=i"   => \$count,
  "s=i"       => \$seconds,
  "m=i"       => \$minutes,
) or die("Error in args; Did you pass a string for a number?\n");

my $direction   = 'up';
my $elapsed     = 0;
my $long_enough = 0;

$seconds        = $seconds + ($minutes * 60);

while ($count > 0 or $long_enough == 0) {
  if ($elapsed > ($seconds - 60)) {
    if ($long_enough > 0) {
      $max = $hard_max;
      if ($count > 0 and int(rand($count)) == 0) {
        $direction = 'up';
      }
      $count -= int(rand(2)) + 1;
    }
    if (int(rand(4)) == 0) {
      $count = $count + int(rand(3));
    }
  }

  #my $percent = ($pace - $min) / ($max - $min) * 100;
  my $percent = ($pace - $hard_min) / ($hard_max - $hard_min);

  if (int(rand(100)) + 1 > ($percent * 100)) {
    if (int(rand(3)) == 0) {
      $direction = 'up';
    }
  }

  if (int(rand(100)) + 1 > ((1 - $percent) * 100)) {
    if (int(rand(4)) == 0) {
      $direction = 'down';
    }
  }

  if ($pace >= $max) {
    $direction = 'down';
    $max += int(random_normal(1,15,2));
    if ($max >= $hard_max) {
      $max = $hard_max;
    }
  }

  if ($pace <= $min) {
    $direction = 'up';
    $min -= int(random_normal(1,15,2));
    if ($min <= $hard_min) {
      $min = $hard_min;
    }
  }

  # Initialize $new_pace
  my $new_pace  = $pace;
  my $period    = int(random_normal(1,20,2));

  my $delta;
  my $build;
  my $steady;

  if ($direction eq 'up') {
    # Smaller steps as pace increases
    my $weight = int(20 * (1 - $percent)) + 1;
    $delta = int(random_normal(1,$weight,$weight / 5));
    $new_pace = $pace + $delta;
    if ($new_pace > $max) {
      $new_pace = $max;
    }
  } else {
    # Smaller steps as pace decreases
    my $weight = int(20 * $percent) + 1;
    $delta = int(random_normal(1,$weight,$weight / 5));
    $new_pace = $pace - $delta;
    if ($new_pace < $min) {
      $new_pace = $min;
    }
  }

  if ($pace < $max and int(rand($percent * 10)) + 2 == 0) {
    $new_pace = $max;
  }

  if ($pace > $min and int(rand((1-$percent) * 10)) + 3 == 0) {
    $new_pace = $min;
  }

  if ($new_pace == $max) {
    if ($pace < ($max - 1) and int(rand(4)) == 0) {
      # Randomly prevent pace from hitting max, this time
      $new_pace = $pace + int(rand($max - $pace));
      if (int(rand(3)) == 0) {
        $direction = 'down';
      }
    } else {
      $period *= 1.5;
    }
  }

  if ($new_pace == $min) {
    if ($pace > ($min + 1) and int(rand(4)) == 0) {
      # Randomly prevent pace from hitting min, this time
      $new_pace = $pace - int(rand($pace - $min));
      if (int(rand(3)) == 0) {
        $direction = 'up';
      }
    } else {
      $period *= 1.5;
    }
  }

  $percent = ($new_pace - $hard_min) / ($hard_max - $hard_min);

  if ($direction eq 'up') {
    $build  = $build * $percent;
    $steady = $steady * $percent;
  } else {
    $build  = $build * (1 - $percent);
    $steady = $steady * (1 - $percent);
  }

  $build = int($build);
  $steady = int($steady);
  $new_pace = int($new_pace);

  my $command = "$ENV{'HOME'}/toys/change-pace";
  my $args    = "-s $pace -e $new_pace -p $build -S $steady";
  if (open my $pipe,'-|',"$command $args") {
    foreach my $line (<$pipe>) {
      if ($line =~ /# ([0-9\.]+) seconds/i) {
        $elapsed += $1;
      }
      print $line;
    }
  } else {
    print STDERR "Could not run $command: $!\n";
    exit 1;
  }
  $pace = $new_pace;

  if ($long_enough == 0 and $elapsed >= $seconds) {
    $long_enough = 1;
    if ($evil > 0) {
      $hard_max = $hard_max + ($hard_max - $hard_min) / 5;
    }
  }
}
