#!/bin/bash

RANDOM=$$$(date +%s)
min=100
max=130
hard_max=220
hard_min=30
pace=$((RANDOM%$((max - min)) + min))
direction='up'

count=20
if [[ "$1" =~ ^[0-9][0-9]*$ ]]; then
  count=$1
fi

program="/tmp/ctronome.$$"

for i in $(seq 1 $count); do
  range=$((max - min))

  if [[ $chance -eq 0 ]]; then
    chance=1
  fi

  if [[ $((RANDOM%20)) -eq 1 ]]; then
    if [[ "$direction" == 'up' ]]; then
      direction='down'
    else
      direction='up'
    fi
  fi

  if [[ $pace -ge $((max - (range / 5))) ]]; then
   if [[ $((RANDOM%5)) -eq 0 ]]; then
      max=$((max + 2))
    fi
    if [[ $pace -ge $max ]]; then
      direction='down'
      max=$((max + 10))
    fi
    if [[ $max -gt $hard_max ]]; then
      max=$hard_max
    fi
  fi

  if [[ $pace -le $((min + (range / 5))) ]]; then
    if [[ $((RANDOM%5)) -eq 0 ]]; then
      min=$((min - 2))
    fi
    if [[ $pace -le $min ]]; then
      direction='up'
      min=$((min - 10))
    fi
    if [[ $min -lt $hard_min ]]; then
      min=$hard_min
    fi
  fi

  build=20
  if [[ $((RANDOM%2)) -ne 0 ]]; then
    build=$((build + RANDOM%5 + RANDOM%10 + RANDOM%15))
  else
    build=$((build - RANDOM%15))
  fi

  steady=20
  if [[ $((RANDOM%2)) -ne 0 ]]; then
    steady=$((steady + RANDOM%5 + RANDOM%10 + RANDOM%15))
  else
    steady=$((steady - RANDOM%15))
  fi

  delta=20
  if [[ $((RAND%4)) -ne 0 ]]; then
    delta=$((delta - RANDOM%15))
  else
    delta=$((delta + RANDOM%20 + RANDOM%10))
  fi

  new_pace=$((pace + delta))
  if [[ "$direction" == 'down' ]]; then
    new_pace=$((pace - delta))
  fi

  chance=$(printf "%.0f" $(echo "10 * (($pace - $min) / $range)" | bc -l))
  if [[ $((RANDOM%chance)) -eq 0 ]]; then
    new_pace=$max
    build=20
    build=20
    if [[ $((RANDOM%3)) -ne 0 ]]; then
      build=$((build - RANDOM%18))
    else
      build=$((build + RANDOM%20 + RANDOM%20))
    fi
    steady=30
    if [[ $((RANDOM%2)) -ne 0 ]]; then
      steady=$((steady + RANDOM%15 + RANDOM%15))
    else
      steady=$((steady - RANDOM%20))
    fi
  fi

  if [[ $pace -eq $max ]]; then
    direction='down'
    new_pace=$(printf "%.0f" $(echo "$min + ($range / 2)" | bc -l))
    build=20
    if [[ $((RANDOM%2)) -ne 0 ]]; then
      build=$((build + RANDOM%10 + RANDOM%10))
    else
      build=$((build - RANDOM%6 - RANDOM%6 - RANDOM%6))
    fi
  fi

  echo "# start: $pace end: $new_pace period: $build steady: $steady"
  change-pace -s $pace -e $new_pace -p $build -S $steady
  pace=$new_pace
  if [[ "$direction" == 'down' ]]; then
    if [[ $((RANDOM%4)) -eq 0 ]]; then
      direction='up'
    fi
  fi

  if [[ $pace -gt $((max - (range / 10))) ]]; then
    if [[ $((RANDOM%4)) -eq 0 ]]; then
      build=$((RANDOM%2 + RANDOM%2 + RANDOM%2 + 2))
      steady=$((RANDOM%2 + RANDOM%2 + RANDOM%2 + 2))
      # Quickly drop to half
      new_pace=$((min + (range / 2)))
      echo "# start: $pace end: $new_pace period: $build steady: $steady"
      change-pace -s $pace -e $new_pace -p $build -S $steady
      old_pace=$pace
      pace=$new_pace
      new_pace=$old_pace
      if [[ $((RANDOM%4)) -eq 0 ]]; then
        steady=20
        if [[ $((RANDOM%3)) ]]; then
          steady=$((steady + RANDOM%15 + RANDOM%15))
        else
          steady=$((steady - RANDOM%15))
        fi
        # Quickly go back up to near max pace
        echo "# start: $pace end: $new_pace period: $build steady: $steady"
        change-pace -s $pace -e $new_pace -p $build -S $steady
        pace=$new_pace
      fi
    fi
  elif [[ $((RANDOM%8)) -eq 0 ]]; then
    direction='up'
    up_and_down=1
    while [[ $up_and_down -ne 0 ]]; do
      max=$((max + 10))
      if [[ $max -gt $hard_max ]]; then
        max=$hard_max
      fi
      echo "# Going up then down"
      build=5
      if [[ $((RANDOM%3)) ]]; then
        build=$((build - RANDOM%4))
      else
        build=$((build + RANDOM%6))
      fi
      steady=20
      if [[ $((RANDOM%3)) ]]; then
        steady=$((steady + RANDOM%10 + RANDOM%10 + RANDOM%20))
      else
        steady=$((steady + RANDOM%15 - RANDOM%15))
      fi
      old_pace=$pace
      new_pace=$max
      echo "# start: $pace end: $new_pace period: $build steady: $steady"
      change-pace -s $pace -e $new_pace -p $build -S $steady
      steady=$((10 - RANDOM%8))

      echo "# start: $pace end: $new_pace period: $build steady: $steady"
      change-pace -s $new_pace -e $old_pace -p $build -S $steady

      pace=$old_pace
      if [[ $((RANDOM%3)) -ne 0 ]]; then
        up_and_down=0
      fi
    done
  fi
done
