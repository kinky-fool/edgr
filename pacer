#!/bin/bash

RANDOM=$$$(date +%s)
min=110
max=140
hard_max=190
hard_min=70
pace=$((RANDOM%$((max - min)) + min))
direction='up'

time=1200
if [[ -n "$1" ]]; then
  if [[ "$1" =~ ^[0-9]*$ ]]; then
    time="$(($1 * 60))"
  elif [[ "$1" =~ ^[0-9]*s$ ]]; then
    time="${1%%s*}"
  fi
fi

prog="/tmp/pace$$"
echo > "$prog"

long_enough=0
count=5

while [[ $long_enough -eq 0 || $count -gt 0 ]]; do

  if [[ $long_enough -eq 1 ]]; then
    count=$((count - (RANDOM%2+1)))
    if [[ $((RANDOM%5)) -eq 0 ]]; then
      count=$((count + RANDOM%3))
    fi
  fi

  range=$((max - min))
  percent=$(printf "%.0f" $(echo "(($pace - $min) / $range) * 100" | bc -l))

  build=$((2 + (RANDOM%9)))
  steady=$((5 + (RANDOM%16)))
  delta=$((20 + (RANDOM%21)))

  if [[ "$direction" == 'up' ]]; then
    # Longer build when speeding up
    build=$(printf "%.0f" $(echo "$build * $percent / 100" | bc -l))
    # Smaller steps when speeding up
    delta=$(printf "%.0f" $(echo "$delta * (100 - $percent) / 100" | bc -l))
    # More steady time, as pace increases
    steady=$(printf "%.0f" $(echo "$steady * $percent / 100" | bc -l))
    new_pace=$((pace + delta))
    if [[ $pace -le $hard_min ]]; then
      max=$hard_max
      min=$(printf "%.0f" \
        $(echo "$hard_min + ($max - $hard_min) * 3 / 10" | bc -l))
      new_pace=$min
    fi
  else
    # Shorter build period when fast
    build=$(printf "%.0f" $(echo "$build * (100 - $percent) / 100" | bc -l))
    # Larger steps when fast, to get slower quicker
    delta=$(printf "%.0f" $(echo "$delta * $percent / 100" | bc -l))
    # Shorter steady time at higher paces
    steady=$(printf "%.0f" $(echo "$build * (100 - $percent) / 100" | bc -l))
    new_pace=$((pace - delta))
    if [[ $pace -ge $hard_max ]]; then
      min=$hard_min
      max=$(printf "%.0f" $(echo "$min + ($hard_max - $min) * 7 / 10" | bc -l))
      new_pace=$max
    fi
  fi

  # Get lucky and power through the painfully long fast pace build?
  chance=$(printf "%.0f" $(echo "2 + $percent / 10" | bc -l))
  if [[ $((RANDOM%chance)) -eq 0 ]]; then
    direction='up'
    new_pace=$max
  fi

  # Get lucky and drop to minimum
  chance=$(printf "%.0f" $(echo "4 + (100 - $percent) / 10" | bc -l))
  if [[ $((RANDOM%chance)) -eq 0 ]]; then
    direction='down'
    new_pace=$min
  fi

  if [[ $new_pace -ge $max ]]; then
    # Get our limits in line
    if [[ $max -ge $hard_max ]]; then
      max=$hard_max
    fi

    if [[ $pace -lt $((max - 1)) && $((RANDOM%3)) -eq 0 ]]; then
      # Randomly prevent from maxing out
      new_pace=$((pace + RANDOM % (max - pace)))
    else
      # Head back down
      direction='down'
      new_pace=$max

      build=$((2 + RANDOM%5))
      steady=$((10 + RANDOM%31))

      max=$((max + (RANDOM%10+1)))
      if [[ $max -gt $hard_max ]]; then
        max=$hard_max
      fi

      min=$((min + (RANDOM%10+1)))
      if [[ $min -gt $max ]]; then
        min=$max
      fi
    fi
  fi

  if [[ $new_pace -le $min ]]; then
    # Get limits in line
    if [[ $min -le $hard_min ]]; then
      min=$hard_min
    fi

    if [[ $pace -gt $((min + 1)) && $((RANDOM%6)) -eq 0 ]]; then
      new_pace=$((pace - RANDOM % (pace - min)))
    else
      direction='up'
      new_pace=$min

      build=$((5 + RANDOM%16))
      steady=$((5 + RANDOM%6))

      min=$((min - (RANDOM%10+1)))
      if [[ $min -lt $hard_min ]]; then
        min=$hard_min
      fi

      max=$((max - (RANDOM%10+1)))
      if [[ $max -lt $min ]]; then
        max=$min
      fi
    fi
  fi

  change-pace -s $pace -e $new_pace -p $build -S $steady >> "$prog"
  pace=$new_pace

  if [[ $long_enough -eq 0 ]]; then
    length=$(awk 'BEGIN {t=0} /sec/ {t+=$2} \
      END {printf ("%.0f\n", t)}' "$prog")
    if [[ $length -ge $time ]]; then
      long_enough=1
      max=$hard_max
    fi
  fi
done

cat "$prog"
#
#  if [[ $pace -gt $((max - (range / 10))) ]]; then
#    if [[ $((RANDOM%4)) -eq 0 ]]; then
#      build=$((RANDOM%2 + RANDOM%2 + RANDOM%2 + 2))
#      steady=$((RANDOM%2 + RANDOM%2 + RANDOM%2 + 2))
#      # Quickly drop to half
#      new_pace=$((min + (range / 2)))
#      echo "# start: $pace end: $new_pace period: $build steady: $steady"
#      change-pace -s $pace -e $new_pace -p $build -S $steady
#      old_pace=$pace
#      pace=$new_pace
#      new_pace=$old_pace
#      if [[ $((RANDOM%4)) -eq 0 ]]; then
#        steady=20
#        if [[ $((RANDOM%3)) ]]; then
#          steady=$((steady + RANDOM%15 + RANDOM%15))
#        else
#          steady=$((steady - RANDOM%15))
#        fi
#        # Quickly go back up to near max pace
#        echo "# start: $pace end: $new_pace period: $build steady: $steady"
#        change-pace -s $pace -e $new_pace -p $build -S $steady
#        pace=$new_pace
#      fi
#    fi
#  elif [[ $((RANDOM%8)) -eq 0 ]]; then
#    direction='up'
#    up_and_down=1
#    while [[ $up_and_down -ne 0 ]]; do
#      max=$((max + 10))
#      if [[ $max -gt $hard_max ]]; then
#        max=$hard_max
#      fi
#      echo "# Going up then down"
#      build=5
#      if [[ $((RANDOM%3)) ]]; then
#        build=$((build - RANDOM%4))
#      else
#        build=$((build + RANDOM%6))
#      fi
#      steady=20
#      if [[ $((RANDOM%3)) ]]; then
#        steady=$((steady + RANDOM%10 + RANDOM%10 + RANDOM%20))
#      else
#        steady=$((steady + RANDOM%15 - RANDOM%15))
#      fi
#      old_pace=$pace
#      new_pace=$max
#      echo "# start: $pace end: $new_pace period: $build steady: $steady"
#      change-pace -s $pace -e $new_pace -p $build -S $steady
#      steady=$((10 - RANDOM%8))
#
#      echo "# start: $pace end: $new_pace period: $build steady: $steady"
#      change-pace -s $new_pace -e $old_pace -p $build -S $steady
#
#      pace=$old_pace
#      if [[ $((RANDOM%3)) -ne 0 ]]; then
#        up_and_down=0
#      fi
#    done
#  fi
